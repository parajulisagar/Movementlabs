{"version":3,"sources":["../src/constants.ts","../src/entities/erc20Token.ts","../src/utils.ts","../src/entities/native.ts","../src/abis/ERC20.ts","../src/ether.ts"],"names":["invariant","NativeCurrency"],"mappings":"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","sourcesContent":["import { ChainId } from '@pancakeswap/chains'\nimport { Percent } from '@pancakeswap/swap-sdk-core'\n\nimport { ERC20Token } from './entities/erc20Token'\n\nexport const ZERO_PERCENT = new Percent('0')\nexport const ONE_HUNDRED_PERCENT = new Percent('1')\n\nexport const WETH9 = {\n  [ChainId.ETHEREUM]: new ERC20Token(\n    ChainId.ETHEREUM,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether',\n    'https://weth.io',\n  ),\n  [ChainId.GOERLI]: new ERC20Token(\n    ChainId.GOERLI,\n    '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',\n    18,\n    'WETH',\n    'Wrapped Ether',\n    'https://weth.io',\n  ),\n  [ChainId.BSC]: new ERC20Token(\n    ChainId.BSC,\n    '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n    18,\n    'ETH',\n    'Binance-Peg Ethereum Token',\n    'https://ethereum.org',\n  ),\n  [ChainId.BSC_TESTNET]: new ERC20Token(\n    ChainId.BSC,\n    '0xE7bCB9e341D546b66a46298f4893f5650a56e99E',\n    18,\n    'ETH',\n    'ETH',\n    'https://ethereum.org',\n  ),\n  [ChainId.ARBITRUM_ONE]: new ERC20Token(\n    ChainId.ARBITRUM_ONE,\n    '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    18,\n    'WETH',\n    'Wrapped Ether',\n    'https://weth.io',\n  ),\n  [ChainId.ARBITRUM_GOERLI]: new ERC20Token(\n    ChainId.ARBITRUM_GOERLI,\n    '0xEe01c0CD76354C383B8c7B4e65EA88D00B06f36f',\n    18,\n    'WETH',\n    'Wrapped Ether',\n    'https://weth.io',\n  ),\n  [ChainId.ZKSYNC]: new ERC20Token(\n    ChainId.ZKSYNC,\n    '0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91',\n    18,\n    'WETH',\n    'Wrapped Ether',\n    'https://weth.io',\n  ),\n  [ChainId.ZKSYNC_TESTNET]: new ERC20Token(\n    ChainId.ZKSYNC_TESTNET,\n    '0x02968DB286f24cB18bB5b24903eC8eBFAcf591C0',\n    18,\n    'WETH',\n    'Wrapped Ether',\n    'https://weth.io',\n  ),\n  [ChainId.POLYGON_ZKEVM]: new ERC20Token(\n    ChainId.POLYGON_ZKEVM,\n    '0x4F9A0e7FD2Bf6067db6994CF12E4495Df938E6e9',\n    18,\n    'WETH',\n    'Wrapped Ether',\n    'https://weth.io',\n  ),\n  [ChainId.POLYGON_ZKEVM_TESTNET]: new ERC20Token(\n    ChainId.POLYGON_ZKEVM_TESTNET,\n    '0x30ec47F7DFae72eA79646e6cf64a8A7db538915b',\n    18,\n    'WETH',\n    'Wrapped Ether',\n    'https://weth.io',\n  ),\n  [ChainId.LINEA]: new ERC20Token(\n    ChainId.LINEA,\n    '0xe5D7C2a44FfDDf6b295A15c148167daaAf5Cf34f',\n    18,\n    'WETH',\n    'Wrapped Ether',\n    'https://weth.io',\n  ),\n  [ChainId.LINEA_TESTNET]: new ERC20Token(\n    ChainId.LINEA_TESTNET,\n    '0x2C1b868d6596a18e32E61B901E4060C872647b6C',\n    18,\n    'WETH',\n    'Wrapped Ether',\n    'https://weth.io',\n  ),\n  [ChainId.OPBNB_TESTNET]: new ERC20Token(\n    ChainId.OPBNB_TESTNET,\n    '0x584f7b986d9942B0859a1E6921efA5342A673d04',\n    18,\n    'WETH',\n    'Wrapped Ether',\n    'https://weth.io',\n  ),\n  [ChainId.OPBNB]: new ERC20Token(\n    ChainId.OPBNB,\n    '0xE7798f023fC62146e8Aa1b36Da45fb70855a77Ea',\n    18,\n    'ETH',\n    'Binance-Peg Ethereum Token',\n    'https://ethereum.org',\n  ),\n  [ChainId.BASE]: new ERC20Token(\n    ChainId.BASE,\n    '0x4200000000000000000000000000000000000006',\n    18,\n    'WETH',\n    'Wrapped Ether',\n    'https://weth.io',\n  ),\n  [ChainId.BASE_TESTNET]: new ERC20Token(\n    ChainId.BASE_TESTNET,\n    '0x4200000000000000000000000000000000000006',\n    18,\n    'WETH',\n    'Wrapped Ether',\n    'https://weth.io',\n  ),\n  [ChainId.SCROLL_SEPOLIA]: new ERC20Token(\n    ChainId.SCROLL_SEPOLIA,\n    '0x5300000000000000000000000000000000000004',\n    18,\n    'WETH',\n    'Wrapped Ether',\n    'https://weth.io',\n  ),\n  [ChainId.SEPOLIA]: new ERC20Token(\n    ChainId.SEPOLIA,\n    '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    18,\n    'WETH',\n    'Wrapped Ether',\n    'https://weth.io',\n  ),\n  [ChainId.ARBITRUM_SEPOLIA]: new ERC20Token(\n    ChainId.ARBITRUM_SEPOLIA,\n    '0x1bdc540dEB9Ed1fA29964DeEcCc524A8f5e2198e',\n    18,\n    'WETH',\n    'Wrapped Ether',\n    'https://weth.io',\n  ),\n  [ChainId.BASE_SEPOLIA]: new ERC20Token(\n    ChainId.BASE_SEPOLIA,\n    '0x4200000000000000000000000000000000000006',\n    18,\n    'WETH',\n    'Wrapped Ether',\n    'https://weth.io',\n  ),\n}\n\nexport const WBNB = {\n  [ChainId.ETHEREUM]: new ERC20Token(\n    ChainId.ETHEREUM,\n    '0x418D75f65a02b3D53B2418FB8E1fe493759c7605',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org',\n  ),\n  [ChainId.BSC]: new ERC20Token(\n    ChainId.BSC,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org',\n  ),\n  [ChainId.BSC_TESTNET]: new ERC20Token(\n    ChainId.BSC_TESTNET,\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org',\n  ),\n  [ChainId.OPBNB_TESTNET]: new ERC20Token(\n    ChainId.OPBNB_TESTNET,\n    '0x4200000000000000000000000000000000000006',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org',\n  ),\n  [ChainId.OPBNB]: new ERC20Token(\n    ChainId.OPBNB,\n    '0x4200000000000000000000000000000000000006',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org',\n  ),\n}\n\nexport const WNATIVE = {\n  [ChainId.ETHEREUM]: WETH9[ChainId.ETHEREUM],\n  [ChainId.GOERLI]: WETH9[ChainId.GOERLI],\n  [ChainId.BSC]: WBNB[ChainId.BSC],\n  [ChainId.BSC_TESTNET]: WBNB[ChainId.BSC_TESTNET],\n  [ChainId.ARBITRUM_ONE]: WETH9[ChainId.ARBITRUM_ONE],\n  [ChainId.ARBITRUM_GOERLI]: WETH9[ChainId.ARBITRUM_GOERLI],\n  [ChainId.POLYGON_ZKEVM]: WETH9[ChainId.POLYGON_ZKEVM],\n  [ChainId.POLYGON_ZKEVM_TESTNET]: WETH9[ChainId.POLYGON_ZKEVM_TESTNET],\n  [ChainId.ZKSYNC]: WETH9[ChainId.ZKSYNC],\n  [ChainId.ZKSYNC_TESTNET]: WETH9[ChainId.ZKSYNC_TESTNET],\n  [ChainId.LINEA]: WETH9[ChainId.LINEA],\n  [ChainId.LINEA_TESTNET]: WETH9[ChainId.LINEA_TESTNET],\n  [ChainId.OPBNB_TESTNET]: WBNB[ChainId.OPBNB_TESTNET],\n  [ChainId.OPBNB]: WBNB[ChainId.OPBNB],\n  [ChainId.BASE]: WETH9[ChainId.BASE],\n  [ChainId.BASE_TESTNET]: WETH9[ChainId.BASE_TESTNET],\n  [ChainId.SCROLL_SEPOLIA]: WETH9[ChainId.SCROLL_SEPOLIA],\n  [ChainId.SEPOLIA]: WETH9[ChainId.SEPOLIA],\n  [ChainId.ARBITRUM_SEPOLIA]: WETH9[ChainId.ARBITRUM_SEPOLIA],\n  [ChainId.BASE_SEPOLIA]: WETH9[ChainId.BASE_SEPOLIA],\n} satisfies Record<ChainId, ERC20Token>\n\nconst ETHER = { name: 'Ether', symbol: 'ETH', decimals: 18 } as const\n\nconst BNB = {\n  name: 'Binance Chain Native Token',\n  symbol: 'BNB',\n  decimals: 18,\n} as const\n\nexport const NATIVE = {\n  [ChainId.ETHEREUM]: ETHER,\n  [ChainId.GOERLI]: { name: 'Goerli Ether', symbol: 'GOR', decimals: 18 },\n  [ChainId.BSC]: BNB,\n  [ChainId.BSC_TESTNET]: {\n    name: 'Binance Chain Native Token',\n    symbol: 'tBNB',\n    decimals: 18,\n  },\n  [ChainId.ARBITRUM_ONE]: ETHER,\n  [ChainId.ARBITRUM_GOERLI]: {\n    name: 'Arbitrum Goerli Ether',\n    symbol: 'AGOR',\n    decimals: 18,\n  },\n  [ChainId.POLYGON_ZKEVM]: ETHER,\n  [ChainId.POLYGON_ZKEVM_TESTNET]: ETHER,\n  [ChainId.ZKSYNC]: ETHER,\n  [ChainId.ZKSYNC_TESTNET]: ETHER,\n  [ChainId.LINEA]: ETHER,\n  [ChainId.LINEA_TESTNET]: ETHER,\n  [ChainId.OPBNB]: BNB,\n  [ChainId.OPBNB_TESTNET]: {\n    name: 'Binance Chain Native Token',\n    symbol: 'tBNB',\n    decimals: 18,\n  },\n  [ChainId.BASE]: ETHER,\n  [ChainId.BASE_TESTNET]: ETHER,\n  [ChainId.SCROLL_SEPOLIA]: ETHER,\n  [ChainId.SEPOLIA]: {\n    name: 'Sepolia Ether',\n    symbol: 'SEP',\n    decimals: 18,\n  },\n  [ChainId.ARBITRUM_SEPOLIA]: {\n    name: 'Arbitrum Sepolia Ether',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n  [ChainId.BASE_SEPOLIA]: {\n    name: 'Sepolia Ether',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n} satisfies Record<\n  ChainId,\n  {\n    name: string\n    symbol: string\n    decimals: number\n  }\n>\n","import { Token } from '@pancakeswap/swap-sdk-core'\nimport { Address } from 'viem'\n\nimport { validateAndParseAddress } from '../utils'\n\n// /**\n//  * Represents an ERC20 token with a unique address and some metadata.\n//  */\nexport class ERC20Token extends Token {\n  public constructor(\n    chainId: number,\n    address: Address,\n    decimals: number,\n    symbol: string,\n    name?: string,\n    projectLink?: string,\n  ) {\n    super(chainId, validateAndParseAddress(address), decimals, symbol, name, projectLink)\n  }\n}\n","import { type Address, getAddress } from 'viem'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n\n// warns if addresses are not checksummed\n// eslint-disable-next-line consistent-return\nexport function validateAndParseAddress(address: string): Address {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency, Token, NativeCurrency } from '@pancakeswap/swap-sdk-core'\n\nimport { WNATIVE, NATIVE } from '../constants'\n\n/**\n *\n * Native is the main usage of a 'native' currency, i.e. for BSC mainnet and all testnets\n */\nexport class Native extends NativeCurrency {\n  protected constructor({\n    chainId,\n    decimals,\n    name,\n    symbol,\n  }: {\n    chainId: number\n    decimals: number\n    symbol: string\n    name: string\n  }) {\n    super(chainId, decimals, symbol, name)\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId as keyof typeof WNATIVE]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static cache: { [chainId: number]: Native } = {}\n\n  public static onChain(chainId: number): Native {\n    if (chainId in this.cache) {\n      return this.cache[chainId]\n    }\n    invariant(!!NATIVE[chainId as keyof typeof NATIVE], 'NATIVE_CURRENCY')\n    const { decimals, name, symbol } = NATIVE[chainId as keyof typeof WNATIVE]\n    // eslint-disable-next-line no-return-assign\n    return (this.cache[chainId] = new Native({ chainId, decimals, symbol, name }))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","export const erc20Abi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [{ name: '', type: 'uint8' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [{ name: '', type: 'address' }],\n    name: 'balanceOf',\n    outputs: [{ name: '', type: 'uint256' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n] as const\n","import invariant from 'tiny-invariant'\nimport { Currency, NativeCurrency, Token } from '@pancakeswap/swap-sdk-core'\nimport { ChainId } from '@pancakeswap/chains'\n\nimport { WETH9 } from './constants'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId as ChainId.ETHEREUM | ChainId.GOERLI]\n\n    invariant(!!weth9, 'WRAPPED')\n\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    if (!this._etherCache[chainId]) {\n      this._etherCache[chainId] = new Ether(chainId)\n    }\n\n    return this._etherCache[chainId]\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n"]}