{"version":3,"file":"v2-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import { Percent, V2_FACTORY_ADDRESSES } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\n\n/**\n * @deprecated use FACTORY_ADDRESS_MAP instead\n */\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const FACTORY_ADDRESS_MAP: { [chainId: number]: string } = V2_FACTORY_ADDRESSES\n\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\nexport const BASIS_POINTS = JSBI.BigInt(10000)\n\nexport const ZERO_PERCENT = new Percent(ZERO)\nexport const ONE_HUNDRED_PERCENT = new Percent(ONE)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { getCreate2Address } from '@ethersproject/address'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { keccak256, pack } from '@ethersproject/solidity'\nimport { BigintIsh, CurrencyAmount, Percent, Price, sqrt, Token } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport {\n  _1000,\n  _997,\n  BASIS_POINTS,\n  FACTORY_ADDRESS,\n  FACTORY_ADDRESS_MAP,\n  FIVE,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ONE,\n  ONE_HUNDRED_PERCENT,\n  ZERO,\n  ZERO_PERCENT,\n} from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH\n  )\n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const factoryAddress = FACTORY_ADDRESS_MAP[tokenA.chainId] ?? FACTORY_ADDRESS\n    return computePairAddress({ factoryAddress, tokenA, tokenB })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  /**\n   * getAmountOut is the linear algebra of reserve ratio against amountIn:amountOut.\n   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000\n   * has the math deduction for the reserve calculation without fee-on-transfer fees.\n   *\n   * With fee-on-transfer tax, intuitively it's just:\n   * inputAmountWithFeeAndTax = 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                          = (1 - amountIn.sellFeesBips / 10000) * amountInWithFee\n   * where amountInWithFee is the amountIn after taking out the LP fees\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\n   *\n   * But we are illustrating the math deduction below to ensure that's the case.\n   *\n   * before swap A * B = K where A = reserveIn B = reserveOut\n   *\n   * after swap A' * B' = K where only k is a constant value\n   *\n   * getAmountOut\n   *\n   * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted\n   * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000)\n   * amountOut = (B - B') / (1 - amountOut.buyFeesBips / 10000) # where A' * B' still is k\n   *           = (B - K/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = (B - AB/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = ((BA + B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn - AB)/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn / (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   * amountOut * (1 - amountOut.buyFeesBips / 10000) = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                                                    /\n   *                                                    (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *\n   * outputAmountWithTax = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                       /\n   *                       (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *                       = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn * 1000\n   *                       /\n   *                       ((A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn) * 1000)\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) 997 * * amountIn\n   *                       /\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * 997 * amountIn)\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\n   *                       /\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\n   *                     = (B * inputAmountWithFeeAndTax)\n   *                       /\n   *                       (1000 * A + inputAmountWithFeeAndTax)\n   *\n   * inputAmountWithFeeAndTax = (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\n   *\n   * @param inputAmount\n   * @param calculateFotFees\n   */\n  public getOutputAmount(\n    inputAmount: CurrencyAmount<Token>,\n    calculateFotFees: boolean = true\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n\n    const percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT\n    const inputAmountAfterTax = percentAfterSellFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          inputAmount.currency,\n          percentAfterSellFees.multiply(inputAmount).quotient // fraction.quotient will round down by itself, which is desired\n        )\n      : inputAmount\n\n    const inputAmountWithFeeAndAfterTax = JSBI.multiply(inputAmountAfterTax.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFeeAndAfterTax, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFeeAndAfterTax)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator) // JSBI.divide will round down by itself, which is desired\n    )\n\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    const percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT\n    const outputAmountAfterTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          outputAmount.currency,\n          outputAmount.multiply(percentAfterBuyFees).quotient // fraction.quotient will round down by itself, which is desired\n        )\n      : outputAmount\n    if (JSBI.equal(outputAmountAfterTax.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    return [\n      outputAmountAfterTax,\n      new Pair(inputReserve.add(inputAmountAfterTax), outputReserve.subtract(outputAmountAfterTax)),\n    ]\n  }\n\n  /**\n   * getAmountIn is the linear algebra of reserve ratio against amountIn:amountOut.\n   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000\n   * has the math deduction for the reserve calculation without fee-on-transfer fees.\n   *\n   * With fee-on-transfer fees, intuitively it's just:\n   * outputAmountWithTax = amountOut / (1 - amountOut.buyFeesBips / 10000)\n   * inputAmountWithTax = amountIn / (1 - amountIn.sellFeesBips / 10000) / 0.997\n   *\n   * But we are illustrating the math deduction below to ensure that's the case.\n   *\n   * before swap A * B = K where A = reserveIn B = reserveOut\n   *\n   * after swap A' * B' = K where only k is a constant value\n   *\n   * getAmountIn\n   *\n   * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000)\n   * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted\n   * amountIn = (A' - A) / (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = (K / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)) - A)\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = (AB / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)) - A)\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((AB - AB + A * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((A * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((A * 1000 * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (997 * (1 - amountIn.sellFeesBips / 10000))\n   *\n   * outputAmountWithTax = amountOut / (1 - amountOut.buyFeesBips / 10000)\n   * inputAmountWithTax = amountIn / (997 * (1 - amountIn.sellFeesBips / 10000))\n   *                    = (A * outputAmountWithTax * 1000) / ((B - outputAmountWithTax) * 997)\n   *\n   * @param outputAmount\n   */\n  public getInputAmount(\n    outputAmount: CurrencyAmount<Token>,\n    calculateFotFees: boolean = true\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    const percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT\n    const outputAmountBeforeTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          outputAmount.currency,\n          JSBI.add(outputAmount.divide(percentAfterBuyFees).quotient, ONE) // add 1 for rounding up\n        )\n      : outputAmount\n\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient) ||\n      JSBI.greaterThanOrEqual(outputAmountBeforeTax.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmountBeforeTax.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmountBeforeTax.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE) // add 1 here is part of the formula, no rounding needed here, since there will not be decimal at this point\n    )\n\n    const percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT\n    const inputAmountBeforeTax = percentAfterSellFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          inputAmount.currency,\n          JSBI.add(inputAmount.divide(percentAfterSellFees).quotient, ONE) // add 1 for rounding up\n        )\n      : inputAmount\n    return [inputAmountBeforeTax, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n\n  private derivePercentAfterSellFees(inputAmount: CurrencyAmount<Token>): Percent {\n    const sellFeeBips = this.token0.wrapped.equals(inputAmount.wrapped.currency)\n      ? this.token0.wrapped.sellFeeBps\n      : this.token1.wrapped.sellFeeBps\n    if (sellFeeBips?.gt(BigNumber.from(0))) {\n      return ONE_HUNDRED_PERCENT.subtract(new Percent(JSBI.BigInt(sellFeeBips)).divide(BASIS_POINTS))\n    } else {\n      return ZERO_PERCENT\n    }\n  }\n\n  private derivePercentAfterBuyFees(outputAmount: CurrencyAmount<Token>): Percent {\n    const buyFeeBps = this.token0.wrapped.equals(outputAmount.wrapped.currency)\n      ? this.token0.wrapped.buyFeeBps\n      : this.token1.wrapped.buyFeeBps\n    if (buyFeeBps?.gt(BigNumber.from(0))) {\n      return ONE_HUNDRED_PERCENT.subtract(new Percent(JSBI.BigInt(buyFeeBps)).divide(BASIS_POINTS))\n    } else {\n      return ZERO_PERCENT\n    }\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\n\nimport { Pair } from './pair'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every((pair) => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import {\n  computePriceImpact,\n  Token,\n  Currency,\n  CurrencyAmount,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  TradeType,\n} from '@uniswap/sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE)\n        .add(slippageTolerance)\n        .multiply(this.inputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Token, Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { Trade } from './entities'\nimport invariant from 'tiny-invariant'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n"],"names":["FACTORY_ADDRESS_MAP","V2_FACTORY_ADDRESSES","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","BASIS_POINTS","ZERO_PERCENT","Percent","ONE_HUNDRED_PERCENT","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","_this","call","name","constructor","setPrototypeOf","_assertThisInitialized","prototype","_inheritsLoose","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","computePairAddress","_ref","factoryAddress","tokenA","tokenB","_ref2","sortsBefore","getCreate2Address","keccak256","pack","address","Pair","currencyAmountA","tokenAmountB","tokenAmounts","currency","this","liquidityToken","Token","chainId","getAddress","_FACTORY_ADDRESS_MAP$","_proto","involvesToken","token","equals","token0","token1","priceOf","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","calculateFotFees","equal","quotient","inputReserve","outputReserve","percentAfterSellFees","derivePercentAfterSellFees","inputAmountAfterTax","greaterThan","CurrencyAmount","fromRawAmount","multiply","inputAmountWithFeeAndAfterTax","numerator","denominator","add","outputAmount","divide","percentAfterBuyFees","derivePercentAfterBuyFees","outputAmountAfterTax","subtract","getInputAmount","outputAmountBeforeTax","greaterThanOrEqual","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","sellFeeBips","wrapped","sellFeeBps","gt","BigNumber","from","buyFeeBps","_createClass","key","get","result","Price","Route","pairs","input","output","length","every","pair","wrappedInput","_step","path","_iterator","_createForOfIteratorHelperLoose","entries","done","_step$value","value","currentInput","push","_midPrice","_step2","prices","_iterator2","_step2$value","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","TradeType","EXACT_INPUT","i","_pair$getOutputAmount","fromFractionalAmount","_pair$getInputAmount","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","nextAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","tokenOut","error","isInsufficientInputAmountError","sortedInsert","concat","pairsExcludingThisPair","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","isInsufficientReservesError","toHex","currencyAmount","toString","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","methodName","args","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer"],"mappings":"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"}