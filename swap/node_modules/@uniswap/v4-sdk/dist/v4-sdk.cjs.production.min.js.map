{"version":3,"file":"v4-sdk.cjs.production.min.js","sources":["../src/utils/sortsBefore.ts","../src/utils/internalConstants.ts","../src/entities/pool.ts","../src/entities/route.ts","../src/entities/trade.ts"],"sourcesContent":["import { Currency } from '@uniswap/sdk-core'\n\nexport function sortsBefore(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA.isNative) return true\n  if (currencyB.isNative) return false\n  return currencyA.wrapped.sortsBefore(currencyB.wrapped)\n}\n","import JSBI from 'jsbi'\nimport { constants } from 'ethers'\n\n// constants used internally but not expected to be used externally\nexport const ADDRESS_ZERO = constants.AddressZero\nexport const NEGATIVE_ONE = JSBI.BigInt(-1)\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const ONE_ETHER = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(18))\n\n// used in liquidity amount math\nexport const Q96 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(96))\nexport const Q192 = JSBI.exponentiate(Q96, JSBI.BigInt(2))\n\n// pool setup\nexport const FEE_AMOUNT_LOW = 100\nexport const FEE_AMOUNT_MEDIUM = 3000\nexport const FEE_AMOUNT_HIGHEST = 10_000\nexport const TICK_SPACING_TEN = 10\nexport const TICK_SPACING_SIXTY = 60\n","import invariant from 'tiny-invariant'\nimport { keccak256 } from '@ethersproject/solidity'\nimport { BigintIsh, Currency, CurrencyAmount, Price } from '@uniswap/sdk-core'\nimport {\n  v3Swap,\n  NoTickDataProvider,\n  Tick,\n  TickConstructorArgs,\n  TickDataProvider,\n  TickListDataProvider,\n  TickMath,\n} from '@uniswap/v3-sdk'\nimport { defaultAbiCoder, isAddress } from 'ethers/lib/utils'\nimport { sortsBefore } from '../utils/sortsBefore'\nimport { ADDRESS_ZERO, NEGATIVE_ONE, Q192 } from '../utils/internalConstants'\nimport JSBI from 'jsbi'\n\nexport const DYNAMIC_FEE_FLAG = 0x800000\nconst NO_TICK_DATA_PROVIDER_DEFAULT = new NoTickDataProvider()\n\nexport type PoolKey = {\n  currency0: string\n  currency1: string\n  fee: number\n  tickSpacing: number\n  hooks: string\n}\n\n/**\n * Represents a V4 pool\n */\nexport class Pool {\n  public readonly currency0: Currency\n  public readonly currency1: Currency\n  public readonly fee: number\n  public readonly tickSpacing: number\n  public readonly sqrtRatioX96: JSBI\n  public readonly hooks: string // address\n  public readonly liquidity: JSBI\n  public readonly tickCurrent: number\n  public readonly tickDataProvider: TickDataProvider\n  public readonly poolKey: PoolKey\n  public readonly poolId: string\n\n  private _currency0Price?: Price<Currency, Currency>\n  private _currency1Price?: Price<Currency, Currency>\n\n  public static getPoolKey(\n    currencyA: Currency,\n    currencyB: Currency,\n    fee: number,\n    tickSpacing: number,\n    hooks: string\n  ): PoolKey {\n    invariant(isAddress(hooks), 'Invalid hook address')\n\n    const [currency0, currency1] = sortsBefore(currencyA, currencyB) ? [currencyA, currencyB] : [currencyB, currencyA]\n    const currency0Addr = currency0.isNative ? ADDRESS_ZERO : currency0.wrapped.address\n    const currency1Addr = currency1.isNative ? ADDRESS_ZERO : currency1.wrapped.address\n\n    return {\n      currency0: currency0Addr,\n      currency1: currency1Addr,\n      fee,\n      tickSpacing,\n      hooks,\n    }\n  }\n\n  public static getPoolId(\n    currencyA: Currency,\n    currencyB: Currency,\n    fee: number,\n    tickSpacing: number,\n    hooks: string\n  ): string {\n    const [currency0, currency1] = sortsBefore(currencyA, currencyB) ? [currencyA, currencyB] : [currencyB, currencyA]\n    const currency0Addr = currency0.isNative ? ADDRESS_ZERO : currency0.wrapped.address\n    const currency1Addr = currency1.isNative ? ADDRESS_ZERO : currency1.wrapped.address\n    return keccak256(\n      ['bytes'],\n      [\n        defaultAbiCoder.encode(\n          ['address', 'address', 'uint24', 'int24', 'address'],\n          [currency0Addr, currency1Addr, fee, tickSpacing, hooks]\n        ),\n      ]\n    )\n  }\n\n  /**\n   * Construct a pool\n   * @param currencyA One of the currencys in the pool\n   * @param currencyB The other currency in the pool\n   * @param fee The fee in hundredths of a bips of the input amount of every swap that is collected by the pool\n   * @param sqrtRatioX96 The sqrt of the current ratio of amounts of currency1 to currency0\n   * @param liquidity The current value of in range liquidity\n   * @param tickCurrent The current tick of the pool\n   */\n  public constructor(\n    currencyA: Currency,\n    currencyB: Currency,\n    fee: number,\n    tickSpacing: number,\n    hooks: string,\n    sqrtRatioX96: BigintIsh,\n    liquidity: BigintIsh,\n    tickCurrent: number,\n    ticks: TickDataProvider | (Tick | TickConstructorArgs)[] = NO_TICK_DATA_PROVIDER_DEFAULT\n  ) {\n    invariant(isAddress(hooks), 'Invalid hook address')\n    invariant(Number.isInteger(fee) && (fee == DYNAMIC_FEE_FLAG || fee < 1_000_000), 'FEE')\n    if (fee == DYNAMIC_FEE_FLAG) {\n      invariant(Number(hooks) > 0, 'Dynamic fee pool requires a hook')\n    }\n    const tickCurrentSqrtRatioX96 = TickMath.getSqrtRatioAtTick(tickCurrent)\n    const nextTickSqrtRatioX96 = TickMath.getSqrtRatioAtTick(tickCurrent + 1)\n    invariant(\n      JSBI.greaterThanOrEqual(JSBI.BigInt(sqrtRatioX96), tickCurrentSqrtRatioX96) &&\n        JSBI.lessThanOrEqual(JSBI.BigInt(sqrtRatioX96), nextTickSqrtRatioX96),\n      'PRICE_BOUNDS'\n    )\n\n    // always create a copy of the list since we want the pool's tick list to be immutable\n    ;[this.currency0, this.currency1] = sortsBefore(currencyA, currencyB)\n      ? [currencyA, currencyB]\n      : [currencyB, currencyA]\n    this.fee = fee\n    this.sqrtRatioX96 = JSBI.BigInt(sqrtRatioX96)\n    this.tickSpacing = tickSpacing\n    this.hooks = hooks\n    this.liquidity = JSBI.BigInt(liquidity)\n    this.tickCurrent = tickCurrent\n    this.tickDataProvider = Array.isArray(ticks) ? new TickListDataProvider(ticks, tickSpacing) : ticks\n    this.poolKey = Pool.getPoolKey(this.currency0, this.currency1, this.fee, this.tickSpacing, this.hooks)\n    this.poolId = Pool.getPoolId(this.currency0, this.currency1, this.fee, this.tickSpacing, this.hooks)\n  }\n\n  /** backwards compatibility with v2/3 sdks */\n  public get token0(): Currency {\n    return this.currency0\n  }\n  public get token1(): Currency {\n    return this.currency1\n  }\n\n  /**\n   * Returns true if the currency is either currency0 or currency1\n   * @param currency The currency to check\n   * @returns True if currency is either currency0 or currency1\n   */\n  public involvesCurrency(currency: Currency): boolean {\n    return currency.equals(this.currency0) || currency.equals(this.currency1)\n  }\n  /** backwards compatibility with v2/3 sdks */\n  public involvesToken(currency: Currency): boolean {\n    return this.involvesCurrency(currency)\n  }\n\n  /**\n   * Returns the current mid price of the pool in terms of currency0, i.e. the ratio of currency1 over currency0\n   */\n  public get currency0Price(): Price<Currency, Currency> {\n    return (\n      this._currency0Price ??\n      (this._currency0Price = new Price(\n        this.currency0,\n        this.currency1,\n        Q192,\n        JSBI.multiply(this.sqrtRatioX96, this.sqrtRatioX96)\n      ))\n    )\n  }\n  /** backwards compatibility with v2/3 sdks */\n  public get token0Price(): Price<Currency, Currency> {\n    return this.currency0Price\n  }\n\n  /**\n   * Returns the current mid price of the pool in terms of currency1, i.e. the ratio of currency0 over currency1\n   */\n  public get currency1Price(): Price<Currency, Currency> {\n    return (\n      this._currency1Price ??\n      (this._currency1Price = new Price(\n        this.currency1,\n        this.currency0,\n        JSBI.multiply(this.sqrtRatioX96, this.sqrtRatioX96),\n        Q192\n      ))\n    )\n  }\n  /** backwards compatibility with v2/3 sdks */\n  public get token1Price(): Price<Currency, Currency> {\n    return this.currency1Price\n  }\n\n  /**\n   * Return the price of the given currency in terms of the other currency in the pool.\n   * @param currency The currency to return price of\n   * @returns The price of the given currency, in terms of the other.\n   */\n  public priceOf(currency: Currency): Price<Currency, Currency> {\n    invariant(this.involvesCurrency(currency), 'CURRENCY')\n    return currency.equals(this.currency0) ? this.currency0Price : this.currency1Price\n  }\n\n  /**\n   * Returns the chain ID of the currencies in the pool.\n   */\n  public get chainId(): number {\n    return this.currency0.chainId\n  }\n\n  /** Works only for vanilla hookless v3 pools, otherwise throws an error */\n  public async getOutputAmount(\n    inputAmount: CurrencyAmount<Currency>,\n    sqrtPriceLimitX96?: JSBI\n  ): Promise<[CurrencyAmount<Currency>, Pool]> {\n    invariant(this.involvesCurrency(inputAmount.currency), 'CURRENCY')\n\n    const zeroForOne = inputAmount.currency.equals(this.currency0)\n\n    const {\n      amountCalculated: outputAmount,\n      sqrtRatioX96,\n      liquidity,\n      tickCurrent,\n    } = await this.swap(zeroForOne, inputAmount.quotient, sqrtPriceLimitX96)\n    const outputCurrency = zeroForOne ? this.currency1 : this.currency0\n    return [\n      CurrencyAmount.fromRawAmount(outputCurrency, JSBI.multiply(outputAmount, NEGATIVE_ONE)),\n      new Pool(\n        this.currency0,\n        this.currency1,\n        this.fee,\n        this.tickSpacing,\n        this.hooks,\n        sqrtRatioX96,\n        liquidity,\n        tickCurrent,\n        this.tickDataProvider\n      ),\n    ]\n  }\n\n  /**\n   * Given a desired output amount of a currency, return the computed input amount and a pool with state updated after the trade\n   * Works only for vanilla hookless v3 pools, otherwise throws an error\n   * @param outputAmount the output amount for which to quote the input amount\n   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\n   * @returns The input amount and the pool with updated state\n   */\n  public async getInputAmount(\n    outputAmount: CurrencyAmount<Currency>,\n    sqrtPriceLimitX96?: JSBI\n  ): Promise<[CurrencyAmount<Currency>, Pool]> {\n    invariant(this.involvesCurrency(outputAmount.currency), 'CURRENCY')\n\n    const zeroForOne = outputAmount.currency.equals(this.currency1)\n\n    const {\n      amountCalculated: inputAmount,\n      sqrtRatioX96,\n      liquidity,\n      tickCurrent,\n    } = await this.swap(zeroForOne, JSBI.multiply(outputAmount.quotient, NEGATIVE_ONE), sqrtPriceLimitX96)\n    const inputCurrency = zeroForOne ? this.currency0 : this.currency1\n    return [\n      CurrencyAmount.fromRawAmount(inputCurrency, inputAmount),\n      new Pool(\n        this.currency0,\n        this.currency1,\n        this.fee,\n        this.tickSpacing,\n        this.hooks,\n        sqrtRatioX96,\n        liquidity,\n        tickCurrent,\n        this.tickDataProvider\n      ),\n    ]\n  }\n\n  /**\n   * Executes a swap\n   * @param zeroForOne Whether the amount in is token0 or token1\n   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\n   * @returns amountCalculated\n   * @returns sqrtRatioX96\n   * @returns liquidity\n   * @returns tickCurrent\n   */\n  private async swap(\n    zeroForOne: boolean,\n    amountSpecified: JSBI,\n    sqrtPriceLimitX96?: JSBI\n  ): Promise<{ amountCalculated: JSBI; sqrtRatioX96: JSBI; liquidity: JSBI; tickCurrent: number }> {\n    if (this.nonImpactfulHook()) {\n      return v3Swap(\n        JSBI.BigInt(this.fee),\n        this.sqrtRatioX96,\n        this.tickCurrent,\n        this.liquidity,\n        this.tickSpacing,\n        this.tickDataProvider,\n        zeroForOne,\n        amountSpecified,\n        sqrtPriceLimitX96\n      )\n    } else {\n      throw 'Error: Unsupported hook'\n    }\n  }\n\n  private nonImpactfulHook(): boolean {\n    // TODO: reference chain specific hook addresses or patterns that do not impact swaps\n    return this.hooks === ADDRESS_ZERO\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { Currency, Price } from '@uniswap/sdk-core'\nimport { Pool } from './pool'\n\n/**\n * Represents a list of pools through which a swap can occur\n * @template TInput The input currency\n * @template TOutput The output currency\n */\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pools: Pool[]\n  public readonly currencyPath: Currency[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  /**\n   * Creates an instance of route.\n   * @param pools An array of `Pool` objects, ordered by the route the swap will take\n   * @param input The input currency\n   * @param output The output currency\n   */\n  public constructor(pools: Pool[], input: TInput, output: TOutput) {\n    invariant(pools.length > 0, 'POOLS')\n\n    const chainId = pools[0].chainId\n    const allOnSameChain = pools.every((pool) => pool.chainId === chainId)\n    invariant(allOnSameChain, 'CHAIN_IDS')\n    invariant(pools[0].involvesCurrency(input), 'INPUT')\n    invariant(pools[pools.length - 1].involvesCurrency(output), 'OUTPUT')\n\n    /**\n     * Normalizes currency0-currency1 order and selects the next currency/fee step to add to the path\n     * */\n    const currencyPath: Currency[] = [input]\n    for (const [i, pool] of pools.entries()) {\n      const currentInputCurrency = currencyPath[i]\n      invariant(currentInputCurrency.equals(pool.currency0) || currentInputCurrency.equals(pool.currency1), 'PATH')\n      const nextCurrency = currentInputCurrency.equals(pool.currency0) ? pool.currency1 : pool.currency0\n      currencyPath.push(nextCurrency)\n    }\n\n    this.pools = pools\n    this.currencyPath = currencyPath\n    this.input = input\n    this.output = output ?? currencyPath[currencyPath.length - 1]\n  }\n\n  public get chainId(): number {\n    return this.pools[0].chainId\n  }\n\n  /**\n   * Returns the mid price of the route\n   */\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n\n    const price = this.pools.slice(1).reduce(\n      ({ nextInput, price }, pool) => {\n        return nextInput.equals(pool.currency0)\n          ? {\n              nextInput: pool.currency1,\n              price: price.multiply(pool.currency0Price),\n            }\n          : {\n              nextInput: pool.currency0,\n              price: price.multiply(pool.currency1Price),\n            }\n      },\n      this.pools[0].currency0.equals(this.input)\n        ? {\n            nextInput: this.pools[0].currency1,\n            price: this.pools[0].currency0Price,\n          }\n        : {\n            nextInput: this.pools[0].currency0,\n            price: this.pools[0].currency1Price,\n          }\n    ).price\n\n    return (this._midPrice = new Price(this.input, this.output, price.denominator, price.numerator))\n  }\n}\n","import { Currency, Fraction, Percent, Price, sortedInsert, CurrencyAmount, TradeType, Token } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO } from '../utils/internalConstants'\nimport { Pool } from './pool'\nimport { Route } from './route'\n\n/**\n * Trades comparator, an extension of the input output comparator that also considers other dimensions of the trade in ranking them\n * @template TInput The input currency, either Ether or an ERC-20\n * @template TOutput The output currency, either Ether or an ERC-20\n * @template TTradeType The trade type, either exact input or exact output\n * @param a The first trade to compare\n * @param b The second trade to compare\n * @returns A sorted ordering for two neighboring elements in a trade array\n */\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  // must have same input and output currency for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      // consider the number of hops since each hop costs gas\n      const aHops = a.swaps.reduce((total, cur) => total + cur.route.currencyPath.length, 0)\n      const bHops = b.swaps.reduce((total, cur) => total + cur.route.currencyPath.length, 0)\n      return aHops - bHops\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a set of routes where some percentage of the input is\n * split across each route.\n *\n * Each route has its own set of pools. Pools can not be re-used across routes.\n *\n * Does not account for slippage, i.e., changes in price environment that can occur between\n * the time the trade is submitted and when it is executed.\n * @template TInput The input currency, either Ether or an ERC-20\n * @template TOutput The output currency, either Ether or an ERC-20\n * @template TTradeType The trade type, either exact input or exact output\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * @deprecated Deprecated in favor of 'swaps' property. If the trade consists of multiple routes\n   * this will return an error.\n   *\n   * When the trade consists of just a single route, this returns the route of the trade,\n   * i.e. which pools the trade goes through.\n   */\n  public get route(): Route<TInput, TOutput> {\n    invariant(this.swaps.length === 1, 'MULTIPLE_ROUTES')\n    return this.swaps[0].route\n  }\n\n  /**\n   * The swaps of the trade, i.e. which routes and how much is swapped in each that\n   * make up the trade.\n   */\n  public readonly swaps: {\n    route: Route<TInput, TOutput>\n    inputAmount: CurrencyAmount<TInput>\n    outputAmount: CurrencyAmount<TOutput>\n  }[]\n\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n\n  /**\n   * The cached result of the input amount computation\n   * @private\n   */\n  private _inputAmount: CurrencyAmount<TInput> | undefined\n\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public get inputAmount(): CurrencyAmount<TInput> {\n    if (this._inputAmount) {\n      return this._inputAmount\n    }\n\n    const inputCurrency = this.swaps[0].inputAmount.currency\n    const totalInputFromRoutes = this.swaps\n      .map(({ inputAmount }) => inputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(inputCurrency, 0))\n\n    this._inputAmount = totalInputFromRoutes\n    return this._inputAmount\n  }\n\n  /**\n   * The cached result of the output amount computation\n   * @private\n   */\n  private _outputAmount: CurrencyAmount<TOutput> | undefined\n\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public get outputAmount(): CurrencyAmount<TOutput> {\n    if (this._outputAmount) {\n      return this._outputAmount\n    }\n\n    const outputCurrency = this.swaps[0].outputAmount.currency\n    const totalOutputFromRoutes = this.swaps\n      .map(({ outputAmount }) => outputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(outputCurrency, 0))\n\n    this._outputAmount = totalOutputFromRoutes\n    return this._outputAmount\n  }\n\n  /**\n   * The cached result of the computed execution price\n   * @private\n   */\n  private _executionPrice: Price<TInput, TOutput> | undefined\n\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public get executionPrice(): Price<TInput, TOutput> {\n    return (\n      this._executionPrice ??\n      (this._executionPrice = new Price(\n        this.inputAmount.currency,\n        this.outputAmount.currency,\n        this.inputAmount.quotient,\n        this.outputAmount.quotient\n      ))\n    )\n  }\n\n  /**\n   * The cached result of the price impact computation\n   * @private\n   */\n  private _priceImpact: Percent | undefined\n\n  /**\n   * Returns the percent difference between the route's mid price and the price impact\n   */\n  public get priceImpact(): Percent {\n    if (this._priceImpact) {\n      return this._priceImpact\n    }\n\n    let spotOutputAmount = CurrencyAmount.fromRawAmount(this.outputAmount.currency, 0)\n    for (const { route, inputAmount } of this.swaps) {\n      const midPrice = route.midPrice\n      spotOutputAmount = spotOutputAmount.add(midPrice.quote(inputAmount))\n    }\n\n    const priceImpact = spotOutputAmount.subtract(this.outputAmount).divide(spotOutputAmount)\n    this._priceImpact = new Percent(priceImpact.numerator, priceImpact.denominator)\n\n    return this._priceImpact\n  }\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @template TInput The input currency, either Ether or an ERC-20\n   * @template TOutput The output currency, either Ether or an ERC-20\n   * @param route The route of the exact in trade\n   * @param amountIn The amount being passed in\n   * @returns The exact in trade\n   */\n  public static async exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_INPUT>> {\n    return Trade.fromRoute(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @template TInput The input currency, either Ether or an ERC-20\n   * @template TOutput The output currency, either Ether or an ERC-20\n   * @param route The route of the exact out trade\n   * @param amountOut The amount returned by the trade\n   * @returns The exact out trade\n   */\n  public static async exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>> {\n    return Trade.fromRoute(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  /**\n   * Constructs a trade by simulating swaps through the given route\n   * @template TInput The input currency, either Ether or an ERC-20.\n   * @template TOutput The output currency, either Ether or an ERC-20.\n   * @template TTradeType The type of the trade, either exact in or exact out.\n   * @param route route to swap through\n   * @param amount the amount specified, either input or output, depending on tradeType\n   * @param tradeType whether the trade is an exact input or exact output swap\n   * @returns The route\n   */\n  public static async fromRoute<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\n    const amounts: CurrencyAmount<Token | Currency>[] = new Array(route.currencyPath.length)\n    let inputAmount: CurrencyAmount<TInput>\n    let outputAmount: CurrencyAmount<TOutput>\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      amounts[0] = amount\n      for (let i = 0; i < route.currencyPath.length - 1; i++) {\n        const pool = route.pools[i]\n        const [outputAmount] = await pool.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n      }\n      inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        amounts[amounts.length - 1].numerator,\n        amounts[amounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = amount\n      for (let i = route.currencyPath.length - 1; i > 0; i--) {\n        const pool = route.pools[i - 1]\n        const [inputAmount] = await pool.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n      }\n      inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amounts[0].numerator, amounts[0].denominator)\n      outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n\n    return new Trade({\n      routes: [{ inputAmount, outputAmount, route }],\n      tradeType,\n    })\n  }\n\n  /**\n   * Constructs a trade from routes by simulating swaps\n   *\n   * @template TInput The input currency, either Ether or an ERC-20.\n   * @template TOutput The output currency, either Ether or an ERC-20.\n   * @template TTradeType The type of the trade, either exact in or exact out.\n   * @param routes the routes to swap through and how much of the amount should be routed through each\n   * @param tradeType whether the trade is an exact input or exact output swap\n   * @returns The trade\n   */\n  public static async fromRoutes<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    routes: {\n      amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>\n      route: Route<TInput, TOutput>\n    }[],\n    tradeType: TTradeType\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\n    const populatedRoutes: {\n      route: Route<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[] = []\n\n    for (const { route, amount } of routes) {\n      const amounts: CurrencyAmount<Token | Currency>[] = new Array(route.currencyPath.length)\n      let inputAmount: CurrencyAmount<TInput>\n      let outputAmount: CurrencyAmount<TOutput>\n\n      if (tradeType === TradeType.EXACT_INPUT) {\n        invariant(amount.currency.equals(route.input), 'INPUT')\n        inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n        amounts[0] = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n\n        for (let i = 0; i < route.currencyPath.length - 1; i++) {\n          const pool = route.pools[i]\n          const [outputAmount] = await pool.getOutputAmount(amounts[i])\n          amounts[i + 1] = outputAmount\n        }\n\n        outputAmount = CurrencyAmount.fromFractionalAmount(\n          route.output,\n          amounts[amounts.length - 1].numerator,\n          amounts[amounts.length - 1].denominator\n        )\n      } else {\n        invariant(amount.currency.equals(route.output), 'OUTPUT')\n        outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n        amounts[amounts.length - 1] = CurrencyAmount.fromFractionalAmount(\n          route.output,\n          amount.numerator,\n          amount.denominator\n        )\n\n        for (let i = route.currencyPath.length - 1; i > 0; i--) {\n          const pool = route.pools[i - 1]\n          const [inputAmount] = await pool.getInputAmount(amounts[i])\n          amounts[i - 1] = inputAmount\n        }\n\n        inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amounts[0].numerator, amounts[0].denominator)\n      }\n\n      populatedRoutes.push({ route, inputAmount, outputAmount })\n    }\n\n    return new Trade({\n      routes: populatedRoutes,\n      tradeType,\n    })\n  }\n\n  /**\n   * Creates a trade without computing the result of swapping through the route. Useful when you have simulated the trade\n   * elsewhere and do not have any tick data\n   * @template TInput The input currency, either Ether or an ERC-20\n   * @template TOutput The output currency, either Ether or an ERC-20\n   * @template TTradeType The type of the trade, either exact in or exact out\n   * @param constructorArguments The arguments passed to the trade constructor\n   * @returns The unchecked trade\n   */\n  public static createUncheckedTrade<\n    TInput extends Currency,\n    TOutput extends Currency,\n    TTradeType extends TradeType\n  >(constructorArguments: {\n    route: Route<TInput, TOutput>\n    inputAmount: CurrencyAmount<TInput>\n    outputAmount: CurrencyAmount<TOutput>\n    tradeType: TTradeType\n  }): Trade<TInput, TOutput, TTradeType> {\n    return new Trade({\n      ...constructorArguments,\n      routes: [\n        {\n          inputAmount: constructorArguments.inputAmount,\n          outputAmount: constructorArguments.outputAmount,\n          route: constructorArguments.route,\n        },\n      ],\n    })\n  }\n\n  /**\n   * Creates a trade without computing the result of swapping through the routes. Useful when you have simulated the trade\n   * elsewhere and do not have any tick data\n   * @template TInput The input currency, either Ether or an ERC-20\n   * @template TOutput The output currency, either Ether or an ERC-20\n   * @template TTradeType The type of the trade, either exact in or exact out\n   * @param constructorArguments The arguments passed to the trade constructor\n   * @returns The unchecked trade\n   */\n  public static createUncheckedTradeWithMultipleRoutes<\n    TInput extends Currency,\n    TOutput extends Currency,\n    TTradeType extends TradeType\n  >(constructorArguments: {\n    routes: {\n      route: Route<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    tradeType: TTradeType\n  }): Trade<TInput, TOutput, TTradeType> {\n    return new Trade(constructorArguments)\n  }\n\n  /**\n   * Construct a trade by passing in the pre-computed property values\n   * @param routes The routes through which the trade occurs\n   * @param tradeType The type of trade, exact input or exact output\n   */\n  private constructor({\n    routes,\n    tradeType,\n  }: {\n    routes: {\n      route: Route<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    tradeType: TTradeType\n  }) {\n    const inputCurrency = routes[0].inputAmount.currency\n    const outputCurrency = routes[0].outputAmount.currency\n    invariant(\n      routes.every(({ route }) => inputCurrency.equals(route.input)),\n      'INPUT_CURRENCY_MATCH'\n    )\n    invariant(\n      routes.every(({ route }) => outputCurrency.equals(route.output)),\n      'OUTPUT_CURRENCY_MATCH'\n    )\n\n    const numPools = routes.map(({ route }) => route.pools.length).reduce((total, cur) => total + cur, 0)\n    const poolIDSet = new Set<string>()\n    for (const { route } of routes) {\n      for (const pool of route.pools) {\n        poolIDSet.add(Pool.getPoolId(pool.currency0, pool.currency1, pool.fee, pool.tickSpacing, pool.hooks))\n      }\n    }\n\n    invariant(numPools === poolIDSet.size, 'POOLS_DUPLICATED')\n\n    this.swaps = routes\n    this.tradeType = tradeType\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount out\n   */\n  public minimumAmountOut(slippageTolerance: Percent, amountOut = this.outputAmount): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return amountOut\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(amountOut.quotient).quotient\n      return CurrencyAmount.fromRawAmount(amountOut.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount in\n   */\n  public maximumAmountIn(slippageTolerance: Percent, amountIn = this.inputAmount): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return amountIn\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(amountIn.quotient).quotient\n      return CurrencyAmount.fromRawAmount(amountIn.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   * @returns The execution price\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * Given a list of pools, and a fixed amount in, returns the top `maxNumResults` trades that go from an input currency\n   * amount to an output currency, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pools the pools to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\n   * @param currentPools used in recursion; the current list of pools\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   * @returns The exact in trade\n   */\n  public static async bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pools: Pool[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPools: Pool[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_INPUT>[]> {\n    invariant(pools.length > 0, 'POOLS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPools.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n      // pool irrelevant\n      if (!pool.currency0.equals(amountIn.currency) && !pool.currency1.equals(amountIn.currency)) continue\n\n      let amountOut: CurrencyAmount<Token | Currency>\n      try {\n        ;[amountOut] = await pool.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output currency, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(currencyOut)) {\n        sortedInsert(\n          bestTrades,\n          await Trade.fromRoute(\n            new Route([...currentPools, pool], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThisPool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n        // otherwise, consider all the other paths that lead from this currency as long as we have not exceeded maxHops\n        await Trade.bestTradeExactIn(\n          poolsExcludingThisPool,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [...currentPools, pool],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pools, and a fixed amount out, returns the top `maxNumResults` trades that go from an input currency\n   * to an output currency amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pools the pools to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the desired currency amount out\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\n   * @param currentPools used in recursion; the current list of pools\n   * @param bestTrades used in recursion; the current list of best trades\n   * @returns The exact out trade\n   */\n  public static async bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pools: Pool[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPools: Pool[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[]> {\n    invariant(pools.length > 0, 'POOLS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPools.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n      // pool irrelevant\n      if (!pool.currency0.equals(amountOut.currency) && !pool.currency1.equals(amountOut.currency)) continue\n\n      let amountIn: CurrencyAmount<Token | Currency>\n      try {\n        ;[amountIn] = await pool.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pool\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input currency, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(currencyIn)) {\n        sortedInsert(\n          bestTrades,\n          await Trade.fromRoute(\n            new Route([pool, ...currentPools], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThisPool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n        // otherwise, consider all the other paths that arrive at this currency as long as we have not exceeded maxHops\n        await Trade.bestTradeExactOut(\n          poolsExcludingThisPool,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [pool, ...currentPools],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n"],"names":["sortsBefore","currencyA","currencyB","isNative","wrapped","ADDRESS_ZERO","AddressZero","NEGATIVE_ONE","JSBI","BigInt","ZERO","ONE","Q192","exponentiate","NO_TICK_DATA_PROVIDER_DEFAULT","NoTickDataProvider","Pool","fee","tickSpacing","hooks","sqrtRatioX96","liquidity","tickCurrent","ticks","isAddress","invariant","Number","isInteger","tickCurrentSqrtRatioX96","TickMath","getSqrtRatioAtTick","nextTickSqrtRatioX96","greaterThanOrEqual","lessThanOrEqual","_ref","this","currency0","currency1","tickDataProvider","Array","isArray","TickListDataProvider","poolKey","getPoolKey","poolId","getPoolId","_ref2","address","_ref3","keccak256","defaultAbiCoder","encode","_proto","prototype","involvesCurrency","currency","equals","involvesToken","priceOf","currency0Price","currency1Price","getOutputAmount","_getOutputAmount","_asyncToGenerator","_regeneratorRuntime","mark","_callee","inputAmount","sqrtPriceLimitX96","zeroForOne","_yield$this$swap","wrap","_context","prev","next","swap","quotient","sent","abrupt","CurrencyAmount","fromRawAmount","multiply","amountCalculated","stop","_x","_x2","apply","arguments","getInputAmount","_getInputAmount","_callee2","outputAmount","_yield$this$swap2","_context2","_x3","_x4","_swap","_callee3","amountSpecified","_context3","nonImpactfulHook","v3Swap","_x5","_x6","_x7","_createClass","key","get","_this$_currency0Price","_currency0Price","Price","_this$_currency1Price","_currency1Price","chainId","Route","pools","input","output","length","every","pool","_step","currencyPath","_iterator","_createForOfIteratorHelperLoose","entries","done","_step$value","value","currentInputCurrency","nextCurrency","push","_midPrice","price","slice","reduce","nextInput","denominator","numerator","tradeComparator","a","b","equalTo","swaps","total","cur","route","lessThan","Trade","routes","tradeType","inputCurrency","outputCurrency","numPools","map","_ref4","poolIDSet","Set","_step2","_iterator2","add","size","exactIn","_exactIn","amountIn","fromRoute","TradeType","EXACT_INPUT","exactOut","_exactOut","amountOut","EXACT_OUTPUT","_fromRoute","amount","amounts","i","_i","_pool","fromFractionalAmount","fromRoutes","_fromRoutes","_callee4","populatedRoutes","_iterator3","_step3","_step3$value","_i2","_pool2","_context4","_x8","_x9","createUncheckedTrade","constructorArguments","_extends","createUncheckedTradeWithMultipleRoutes","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","worstExecutionPrice","bestTradeExactIn","_bestTradeExactIn","_callee5","currencyAmountIn","currencyOut","_temp","currentPools","nextAmountIn","bestTrades","maxNumResults","_ref5$maxNumResults","maxHops","_ref5$maxHops","_ref5","_context5","t0","isInsufficientInputAmountError","t1","sortedInsert","t2","concat","t3","t4","t5","poolsExcludingThisPool","_x10","_x11","_x12","_x13","_x14","_x15","_x16","bestTradeExactOut","_bestTradeExactOut","_callee6","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref6$maxNumResults","_ref6$maxHops","_ref6","_context6","isInsufficientReservesError","_x17","_x18","_x19","_x20","_x21","_x22","_x23","_inputAmount","totalInputFromRoutes","_ref7","_outputAmount","totalOutputFromRoutes","_ref8","_this$_executionPrice","_executionPrice","_priceImpact","_step4","spotOutputAmount","_iterator4","_step4$value","midPrice","quote","priceImpact","subtract","divide","Percent"],"mappings":"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"}