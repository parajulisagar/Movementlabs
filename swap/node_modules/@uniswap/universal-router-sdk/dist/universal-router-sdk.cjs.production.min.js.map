{"version":3,"file":"universal-router-sdk.cjs.production.min.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/entities/protocols/uniswap.ts","../src/utils/numbers.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/utils/routerTradeAdapter.ts","../src/entities/protocols/unwrapWETH.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT_V1_5 = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT_V1_5,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\ntype ChainConfig = {\n  router: string\n  creationBlock: number\n  weth: string\n}\n\nconst WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\nconst CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    creationBlock: 17143817,\n  },\n  // goerli\n  [5]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    creationBlock: 8940568,\n  },\n  // sepolia\n  [11155111]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    creationBlock: 3543575,\n  },\n  // polygon\n  [137]: {\n    router: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    creationBlock: 52210153,\n  },\n  //polygon mumbai\n  [80001]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    creationBlock: 35176052,\n  },\n  //optimism\n  [10]: {\n    router: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 114702266,\n  },\n  // optimism goerli\n  [420]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 8887728,\n  },\n  // arbitrum\n  [42161]: {\n    router: '0x5E325eDA8064b456f4781070C0738d849c824258',\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    creationBlock: 169472836,\n  },\n  // arbitrum goerli\n  [421613]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    creationBlock: 18815277,\n  },\n  // celo\n  [42220]: {\n    router: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 21407637,\n  },\n  // celo alfajores\n  [44787]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 17566658,\n  },\n  // binance smart chain\n  [56]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    creationBlock: 35160263,\n  },\n  // avalanche\n  [43114]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    creationBlock: 40237257,\n  },\n  // base goerli\n  [84531]: {\n    router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 6915289,\n  },\n  // base mainnet\n  [8453]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 9107268,\n  },\n  [81457]: {\n    router: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n    weth: '0x4300000000000000000000000000000000000004',\n    creationBlock: 1116444,\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].router\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const E_ETH_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE, ETH_ADDRESS } from '../../utils/constants'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\n// when safe mode is enabled, the SDK will add an extra ETH sweep for security\n// when useRouterBalance is enabled the SDK will use the balance in the router for the swap\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  useRouterBalance?: boolean\n  inputTokenPermit?: Permit2Permit\n  flatFee?: FlatFeeOptions\n  safeMode?: boolean\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  readonly payerIsUser: boolean\n\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n\n    if (this.inputRequiresWrap) this.payerIsUser = false\n    else if (this.options.useRouterBalance) this.payerIsUser = false\n    else this.payerIsUser = true\n  }\n\n  get inputRequiresWrap(): boolean {\n    return this.trade.inputAmount.currency.isNative\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.inputRequiresWrap) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.fee.recipient,\n          feeBips,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.flatFee.recipient,\n          feeAmount,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    if (this.inputRequiresWrap && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n\n    if (this.options.safeMode) planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\nimport { SeaportTrade } from './entities'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\n    let nftInputTokens = new Set<string>()\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        if (nftTrade.market == Market.Seaport) {\n          const seaportTrade = nftTrade as SeaportTrade\n          const seaportInputTokens = seaportTrade.getInputTokens()\n          seaportInputTokens.forEach((inputToken) => {\n            nftInputTokens.add(inputToken)\n          })\n        } else {\n          nftInputTokens.add(ETH_ADDRESS)\n        }\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade or NFTTrade'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    nftInputTokens.forEach((inputToken) => {\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\n    })\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * This version does not work correctly for Seaport ERC20->NFT purchases\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot?: string\n  merkleProof?: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\n\n    let calldata\n    if (this.orders.length == 1) {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBids[0],\n        makerOrders[0],\n        makerSignatures[0],\n        merkleTrees[0],\n        ZERO_ADDRESS, // affiliate\n      ])\n    } else {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\n        takerBids,\n        makerOrders,\n        makerSignatures,\n        merkleTrees,\n        ZERO_ADDRESS, // affiliate\n        false, // isAtomic (we deal with this in allowRevert)\n      ])\n    }\n\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(orders: LooksRareV2Data[]): {\n    takerBids: TakerOrder[]\n    makerOrders: MakerOrder[]\n    makerSignatures: string[]\n    totalValue: BigNumber\n    merkleTrees: MerkleTree[]\n  } {\n    let takerBids: TakerOrder[] = []\n    let makerOrders: MakerOrder[] = []\n    let makerSignatures: string[] = []\n    let totalValue: BigNumber = BigNumber.from(0)\n    let merkleTrees: MerkleTree[] = []\n\n    orders.forEach((order) => {\n      makerOrders.push({ ...order.apiOrder })\n\n      makerSignatures.push(order.apiOrder.signature)\n\n      takerBids.push({\n        recipient: order.taker,\n        additionalParameters: '0x',\n      })\n\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\n\n      merkleTrees.push({\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\n        proof: order.apiOrder.merkleProof ?? [],\n      })\n    })\n\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getInputTokens(): Set<string> {\n    let inputTokens = new Set<string>()\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const consideration of item.parameters.consideration) {\n          const token = consideration.token.toLowerCase()\n          inputTokens.add(token)\n        }\n      }\n    }\n    return inputTokens\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n        return CommandType.SEAPORT_V1_5\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import { MixedRouteSDK, Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Ether, Token, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Route as V2Route } from '@uniswap/v2-sdk'\nimport { Pool, Route as V3Route, FeeAmount } from '@uniswap/v3-sdk'\nimport { BigNumber } from 'ethers'\nimport { ETH_ADDRESS, E_ETH_ADDRESS } from './constants'\n\nexport type TokenInRoute = {\n  address: string\n  chainId: number\n  symbol: string\n  decimals: string\n  name?: string\n  buyFeeBps?: string\n  sellFeeBps?: string\n}\n\nexport enum PoolType {\n  V2Pool = 'v2-pool',\n  V3Pool = 'v3-pool',\n}\n\nexport type V2Reserve = {\n  token: TokenInRoute\n  quotient: string\n}\n\nexport type V2PoolInRoute = {\n  type: PoolType.V2Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  reserve0: V2Reserve\n  reserve1: V2Reserve\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V3PoolInRoute = {\n  type: PoolType.V3Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  sqrtRatioX96: string\n  liquidity: string\n  tickCurrent: string\n  fee: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type PartialClassicQuote = {\n  // We need tokenIn/Out to support native currency\n  tokenIn: string\n  tokenOut: string\n  tradeType: TradeType\n  route: Array<(V3PoolInRoute | V2PoolInRoute)[]>\n}\n\ninterface RouteResult {\n  routev3: V3Route<Currency, Currency> | null\n  routev2: V2Route<Currency, Currency> | null\n  mixedRoute: MixedRouteSDK<Currency, Currency> | null\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nexport const isNativeCurrency = (address: string) =>\n  address.toLowerCase() === ETH_ADDRESS.toLowerCase() || address.toLowerCase() === E_ETH_ADDRESS.toLowerCase()\n\n// Helper class to convert routing-specific quote entities to RouterTrade entities\n// the returned RouterTrade can then be used to build the UniswapTrade entity in this package\nexport class RouterTradeAdapter {\n  // Generate a RouterTrade using fields from a classic quote response\n  static fromClassicQuote(quote: PartialClassicQuote) {\n    const { route, tokenIn, tokenOut } = quote\n\n    if (!route) throw new Error('Expected route to be present')\n    if (!route.length) throw new Error('Expected there to be at least one route')\n    if (route.some((r) => !r.length)) throw new Error('Expected all routes to have at least one pool')\n    const firstRoute = route[0]\n\n    const tokenInData = firstRoute[0].tokenIn\n    const tokenOutData = firstRoute[firstRoute.length - 1].tokenOut\n\n    if (!tokenInData || !tokenOutData) throw new Error('Expected both tokenIn and tokenOut to be present')\n    if (tokenInData.chainId !== tokenOutData.chainId)\n      throw new Error('Expected tokenIn and tokenOut to be have same chainId')\n\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenIn), tokenInData)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenOut), tokenOutData)\n\n    const typedRoutes: RouteResult[] = route.map((subRoute) => {\n      const rawAmountIn = subRoute[0].amountIn\n      const rawAmountOut = subRoute[subRoute.length - 1].amountOut\n\n      if (!rawAmountIn || !rawAmountOut) {\n        throw new Error('Expected both raw amountIn and raw amountOut to be present')\n      }\n\n      const inputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyIn, rawAmountIn)\n      const outputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyOut, rawAmountOut)\n\n      const isOnlyV2 = RouterTradeAdapter.isVersionedRoute<V2PoolInRoute>(PoolType.V2Pool, subRoute)\n      const isOnlyV3 = RouterTradeAdapter.isVersionedRoute<V3PoolInRoute>(PoolType.V3Pool, subRoute)\n\n      return {\n        routev3: isOnlyV3\n          ? new V3Route(\n              (subRoute as V3PoolInRoute[]).map(RouterTradeAdapter.toPool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev2: isOnlyV2\n          ? new V2Route(\n              (subRoute as V2PoolInRoute[]).map(RouterTradeAdapter.toPair),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        mixedRoute:\n          !isOnlyV3 && !isOnlyV2\n            ? new MixedRouteSDK(subRoute.map(RouterTradeAdapter.toPoolOrPair), parsedCurrencyIn, parsedCurrencyOut)\n            : null,\n        inputAmount,\n        outputAmount,\n      }\n    })\n\n    return new RouterTrade({\n      v2Routes: typedRoutes\n        .filter((route) => route.routev2)\n        .map((route) => ({\n          routev2: route.routev2 as V2Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v3Routes: typedRoutes\n        .filter((route) => route.routev3)\n        .map((route) => ({\n          routev3: route.routev3 as V3Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      mixedRoutes: typedRoutes\n        .filter((route) => route.mixedRoute)\n        .map((route) => ({\n          mixedRoute: route.mixedRoute as MixedRouteSDK<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      tradeType: quote.tradeType,\n    })\n  }\n\n  private static toCurrency(isNative: boolean, token: TokenInRoute): Currency {\n    if (isNative) {\n      return Ether.onChain(token.chainId)\n    }\n    return this.toToken(token)\n  }\n\n  private static toPoolOrPair = (pool: V3PoolInRoute | V2PoolInRoute): Pool | Pair => {\n    return pool.type === PoolType.V3Pool ? RouterTradeAdapter.toPool(pool) : RouterTradeAdapter.toPair(pool)\n  }\n\n  private static toToken(token: TokenInRoute): Token {\n    const { chainId, address, decimals, symbol, buyFeeBps, sellFeeBps } = token\n    return new Token(\n      chainId,\n      address,\n      parseInt(decimals.toString()),\n      symbol,\n      /* name */ undefined,\n      false,\n      buyFeeBps ? BigNumber.from(buyFeeBps) : undefined,\n      sellFeeBps ? BigNumber.from(sellFeeBps) : undefined\n    )\n  }\n\n  private static toPool({ fee, sqrtRatioX96, liquidity, tickCurrent, tokenIn, tokenOut }: V3PoolInRoute): Pool {\n    return new Pool(\n      RouterTradeAdapter.toToken(tokenIn),\n      RouterTradeAdapter.toToken(tokenOut),\n      parseInt(fee) as FeeAmount,\n      sqrtRatioX96,\n      liquidity,\n      parseInt(tickCurrent)\n    )\n  }\n\n  private static toPair = ({ reserve0, reserve1 }: V2PoolInRoute): Pair => {\n    return new Pair(\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve0.token), reserve0.quotient),\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve1.token), reserve1.quotient)\n    )\n  }\n\n  private static isVersionedRoute<T extends V2PoolInRoute | V3PoolInRoute>(\n    type: PoolType,\n    route: (V3PoolInRoute | V2PoolInRoute)[]\n  ): route is T[] {\n    return route.every((pool) => pool.type === type)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n"],"names":["RouterTradeType","Market","TokenType","CommandType","NFTTrade","market","orders","this","length","invariant","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","PERMIT2_TRANSFER_FROM_STRUCT","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","RoutePlanner","commands","inputs","_proto","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","encodedInput","defaultAbiCoder","encode","createCommand","push","has","Error","concat","toString","padStart","CHAIN_CONFIGS","router","weth","creationBlock","WETH_ADDRESS","chainId","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","fee","flatFee","payerIsUser","inputRequiresWrap","useRouterBalance","planner","_config","maximumAmountIn","slippageTolerance","quotient","recipient","swapOptions","outputIsNative","outputAmount","currency","isNative","routerMustCustody","tradeType","TradeType","EXACT_INPUT","routes","swaps","swap","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","feeBips","toHex","multiply","wrapped","address","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","priceImpact","greaterThan","safeMode","key","get","inputAmount","V2Trade","path","map","pool","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","outputToken","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","every","mixedRouteIsAllV3","encodeMixedRouteToPath","liquidityToken","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","token","details","permit2TransferFrom","mapApprovalProtocol","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","getInputTokens","forEach","add","uniswapTrade","inputIsNative","inputTokenPermit","UnwrapWETH","encodePlan","swapNFTCallParameters","totalPrice","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","calldata","INTERFACE","encodeFunctionData","value","toHexString","Interface","abi","CryptopunkTrade","_NFTTrade","Cryptopunks","_inheritsLoose","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","taker","additionalParameters","root","merkleRoot","proof","merkleProof","NFT20Trade","tokenIds","tokenAmounts","isV3","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","offer","identifierOrCriteria","inputTokens","consideration","totalOrderPrice","calculateValue","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","j","findIndex","x","recipientIndex","_loop","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","getSighash","getFunction","signedInput","slice","tokenAmount","PoolType","wethAddress","permit2Data","isNativeCurrency","RouterTradeAdapter","fromClassicQuote","quote","tokenIn","tokenOut","some","r","firstRoute","tokenInData","tokenOutData","parsedCurrencyIn","toCurrency","parsedCurrencyOut","typedRoutes","subRoute","rawAmountIn","rawAmountOut","CurrencyAmount","fromRawAmount","isOnlyV2","isVersionedRoute","V2Pool","isOnlyV3","V3Pool","routev3","V3Route","toPool","routev2","V2Route","toPair","mixedRoute","toPoolOrPair","RouterTrade","v2Routes","v3Routes","mixedRoutes","Ether","onChain","toToken","symbol","buyFeeBps","sellFeeBps","Token","parseInt","decimals","sqrtRatioX96","liquidity","tickCurrent","reserve0","reserve1"],"mappings":"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"}