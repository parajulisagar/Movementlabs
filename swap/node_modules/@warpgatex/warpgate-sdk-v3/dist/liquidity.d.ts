import { BigNumber, ethers } from "ethers";
import BN from "bignumber.js";
import { Position, MethodParameters, FeeAmount, Pool } from "@warpgatex/warp-v3-sdk";
import { CurrencyAmount, Token, TradeType, Currency } from "@uniswap/sdk-core";
export declare enum TransactionState {
    Failed = "Failed",
    New = "New",
    Rejected = "Rejected",
    Sending = "Sending",
    Sent = "Sent"
}
export interface PositionInfo {
    positionId: number;
    tickLower: number;
    tickUpper: number;
    liquidity: BigNumber;
    tokensOwed0: BN;
    tokensOwed1: BN;
    token0: string;
    token1: string;
    fee: number;
    tokenAmount0: BN;
    tokenAmount1: BN;
    currentPrice: number;
    lowerRangePrice: number;
    upperRangePrice: number;
}
interface SwapOptions {
    slippage?: number;
    deadline?: number;
}
/**
 * Represents a liquidity client that interacts with the liquidity-related functionality of the SDK.
 */
export declare class liquidityClient {
    signer: ethers.Signer;
    chainId: number;
    constructor(signer: ethers.Signer, chainId: number);
    /**
     * Re-initializes the signer and chain ID.
     * @param signer - The signer to use for the client.
     * @param chainId - The chain ID.
     */
    reinitialize(signer: ethers.Signer, chainId: number): void;
    /**
     * Retrieves the position IDs associated with the given address.
     *
     * @param address - The address for which to retrieve the position IDs.
     * @param chainId - The chain ID.
     * @returns An array of position IDs.
     */
    getPositionIds(address: string): Promise<any>;
    /**
     * Retrieves information about a specific position.
     * @param tokenId - The ID of the position.
     * @returns A Promise that resolves to a PositionInfo object containing the position details.
     */
    getPositionInfo(tokenId: number): Promise<PositionInfo>;
    /**
     * Mint a position in the liquidity pool.
     *
     * @param token0 - The first token of the liquidity pair.
     * @param token0Amount - The amount of the first token to be minted.
     * @param token1 - The second token of the liquidity pair.
     * @param token1Amount - The amount of the second token to be minted.
     * @param pool - The liquidity pool.
     * @param createPool - A boolean indicating whether to create the pool if it doesn't exist.
     * @param lowerRange - The lower price range for the position. Optional.
     * @param upperRange - The upper price range for the position. Optional.
     * @returns A promise that resolves to the method parameters for minting the position.
     */
    mintPosition(token0: Token, token0Amount: number, token1: Token, token1Amount: number, pool: Pool, createPool: boolean, lowerRange?: number, upperRange?: number, gasPrice?: BigNumber): Promise<MethodParameters>;
    /**
     * Increases a position by providing additional liquidity.
     * @param positionId - The ID of the position to increase.
     * @param token0 - The first token of the position.
     * @param token0Amount - The amount of the first token to add to the position.
     * @param token1 - The second token of the position.
     * @param token1Amount - The amount of the second token to add to the position.
     * @returns A promise that resolves to the method parameters for increasing the position.
     */
    increasePosition(positionId: number, token0: Token, token0Amount: number, token1: Token, token1Amount: number, gasPrice?: BigNumber): Promise<MethodParameters>;
    /**
     * Retrieves the token transfer approval for a given token and spender address.
     * If the token is WETH or `approveWeth` is set to true, it approves the spender address to spend the maximum amount of tokens.
     * Otherwise, it checks if the current allowance is already enough and if not, approves the spender address to spend the maximum amount of tokens.
     * @param token The token for which to retrieve the transfer approval.
     * @param spenderAddress The address of the spender.
     * @param amount The amount of tokens to approve. Defaults to `ethers.constants.MaxUint256`.
     * @param approveWeth Whether to approve the spender address for WETH token. Defaults to `false`.
     * @returns A promise that resolves to the transaction receipt once the approval is complete.
     * @throws Error if there is no provider or address.
     */
    getTokenTransferApproval(token: Token, spenderAddress: string, amount?: BigNumber, approveWeth?: boolean, gasPrice?: BigNumber): Promise<any>;
    /**
     * Constructs a position using the provided token amounts, pool configuration, and tick range.
     * @param token0Amount The amount of token0.
     * @param token1Amount The amount of token1.
     * @param configuredPool The configured pool.
     * @param tickLower The lower tick of the position.
     * @param tickUpper The upper tick of the position.
     * @returns A Promise that resolves to the constructed Position.
     * @throws Error if no provider is available.
     */
    constructPosition(token0Amount: CurrencyAmount<Token>, token1Amount: CurrencyAmount<Token>, configuredPool: Pool, tickLower: number, tickUpper: number): Promise<Position>;
    /**
     * Returns the quote token based on the given input and output tokens and trade type.
     * @param tokenIn The input token.
     * @param tokenOut The output token.
     * @param tradeType The type of trade.
     * @returns The quote token.
     */
    getQuoteToken: (tokenIn: Currency, tokenOut: Currency, tradeType: TradeType) => Currency;
    /**
     * Performs a swap between two tokens.
     *
     * @param tokenIn The input token.
     * @param tokenOut The output token.
     * @param tradeType The type of trade.
     * @param tokenAmount The amount of tokens to swap.
     * @param options Additional swap options.
     * @returns The swap transaction.
     * @throws Error if the slippage tolerance is invalid or the deadline is in the past.
     */
    swap(tokenIn: Token, tokenOut: Token, tradeType: TradeType, tokenAmount: string, options?: SwapOptions, gasPrice?: BigNumber): Promise<import("@warpgatex/warp-smart-order-router").SwapRoute>;
    /**
     * Retrieves a quote for a trade between two tokens.
     * @param tokenIn The input token for the trade.
     * @param tokenOut The output token for the trade.
     * @param tradeType The type of trade (exact input or exact output).
     * @param tokenAmount The amount of tokens to be traded.
     * @param slippage The maximum acceptable slippage for the trade.
     * @returns An object containing the exchange rate, price impact, and route of the trade.
     */
    getQuote(tokenIn: Token, tokenOut: Token, tradeType: TradeType, tokenAmount: string, slippage: number): Promise<{
        exchangeRate: string;
        priceImpact: string;
        route: import("@uniswap/router-sdk").IRoute<import("@warpgatex/warp-sdk-core").Currency, import("@warpgatex/warp-sdk-core").Currency, import("@uniswap/v2-sdk").Pair | import("@uniswap/v3-sdk").Pool>[];
    }>;
    /**
     * Constructs a position with placeholder liquidity.
     *
     * @param token0 - The first token of the pool.
     * @param token1 - The second token of the pool.
     * @param poolFee - The fee amount of the pool.
     * @returns A promise that resolves to a Position object.
     */
    constructPositionWithPlaceholderLiquidity(token0: Token, token1: Token, poolFee: FeeAmount): Promise<Position>;
    /**
     * Collects fees for a given position.
     * @param positionId - The ID of the position.
     * @param token0 - The first token of the position.
     * @param token1 - The second token of the position.
     * @param recipient - The address where the collected fees will be sent to.
     * @returns A promise that resolves to the method parameters for collecting fees.
     */
    collectFees(positionId: number, token0: Token, token1: Token, recipient: string): Promise<MethodParameters>;
    /**
     * Removes liquidity from a position.
     *
     * @param positionId - The ID of the position.
     * @param token0 - The first token in the liquidity pair.
     * @param token1 - The second token in the liquidity pair.
     * @param percent - The percentage of liquidity to remove.
     * @param recipient - The address where the removed liquidity will be sent.
     * @returns A Promise that resolves to the method parameters for removing liquidity.
     */
    removeLiquidity(positionId: number, token0: Token, token1: Token, percent: number, recipient: string): Promise<MethodParameters>;
    /**
     * Wraps the native token by depositing the specified amount into the WETH contract.
     * @param amount - The amount of native token to wrap.
     * @returns A promise that resolves to the transaction object.
     */
    wrapNativeToken(amount: string): Promise<any>;
    /**
     * Unwraps the native token by withdrawing the specified amount from the WETH contract.
     * @param amount - The amount of native token to unwrap.
     * @returns A promise that resolves to the transaction object.
     */
    unwrapNativeToken(amount: string): Promise<any>;
}
export {};
