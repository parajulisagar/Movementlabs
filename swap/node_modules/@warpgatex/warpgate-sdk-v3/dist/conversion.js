"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatAmount = exports.toReadableAmount = exports.fromReadableAmount = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const ethers_1 = require("ethers");
const jsbi_1 = __importDefault(require("jsbi"));
/**
 * Converts a readable amount to a JSBI value.
 *
 * @param amount - The readable amount to convert.
 * @param decimals - The number of decimal places in the amount.
 * @returns The JSBI value representing the converted amount.
 */
function fromReadableAmount(amount, decimals) {
    const extraDigits = Math.pow(10, countDecimals(amount));
    const adjustedAmount = parseInt((amount * extraDigits).toString(), 10);
    return jsbi_1.default.divide(jsbi_1.default.multiply(jsbi_1.default.BigInt(adjustedAmount), jsbi_1.default.exponentiate(jsbi_1.default.BigInt(10), jsbi_1.default.BigInt(decimals))), jsbi_1.default.BigInt(extraDigits));
}
exports.fromReadableAmount = fromReadableAmount;
/**
 * Converts a raw amount to a readable amount with the specified number of decimals.
 *
 * @param rawAmount The raw amount to convert.
 * @param decimals The number of decimals to include in the readable amount.
 * @returns The converted readable amount as a string.
 */
function toReadableAmount(rawAmount, decimals) {
    return jsbi_1.default.divide(jsbi_1.default.BigInt(rawAmount), jsbi_1.default.exponentiate(jsbi_1.default.BigInt(10), jsbi_1.default.BigInt(decimals))).toString();
}
exports.toReadableAmount = toReadableAmount;
/**
 * Counts the number of decimal places in a number.
 *
 * @param x - The number to count the decimal places of.
 * @returns The number of decimal places in the given number.
 */
function countDecimals(x) {
    if (Math.floor(x) === x) {
        return 0;
    }
    return x.toString().split(".")[1].length || 0;
}
/**
 * Formats the given amount with the specified number of decimals.
 *
 * @param amount - The amount to be formatted.
 * @param decimals - The number of decimals to be used for formatting.
 * @returns The formatted amount as a string.
 */
function formatAmount(amount, decimals) {
    return ethers_1.ethers.utils
        .formatUnits(new bignumber_js_1.default(amount).multipliedBy(10 ** decimals).toFixed(0), decimals)
        .toString();
}
exports.formatAmount = formatAmount;
