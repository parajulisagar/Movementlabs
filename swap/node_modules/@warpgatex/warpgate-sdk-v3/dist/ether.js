"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ether = void 0;
/**
 * Represents the Ether currency.
 * Extends the NativeCurrency class.
 */
const sdk_core_1 = require("@uniswap/sdk-core");
const constants_1 = require("./constants");
class Ether extends sdk_core_1.NativeCurrency {
    /**
     * Constructs a new instance of the Ether class.
     * @param chainId The chain ID of the Ether currency.
     */
    constructor(chainId) {
        super(chainId, 18, "ETH", "Ether");
    }
    /**
     * Gets the wrapped token associated with Ether.
     * @returns The wrapped token.
     */
    get wrapped() {
        return constants_1.WETH[this.chainId];
    }
    /**
     * Retrieves the Ether instance for the specified chain ID.
     * If an instance does not exist, a new instance is created and cached.
     * @param chainId The chain ID.
     * @returns The Ether instance.
     */
    static onChain(chainId) {
        var _a;
        return ((_a = this._etherCache[chainId]) !== null && _a !== void 0 ? _a : (this._etherCache[chainId] = new Ether(chainId)));
    }
    /**
     * Checks if the Ether currency is equal to another currency.
     * @param other The other currency to compare.
     * @returns True if the currencies are equal, false otherwise.
     */
    equals(other) {
        return other.isNative && other.chainId === this.chainId;
    }
}
exports.Ether = Ether;
Ether._etherCache = {};
