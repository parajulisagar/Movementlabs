import { ethers } from "ethers";
import { FeeAmount, Pool } from "@warpgatex/warp-v3-sdk";
import { Token, CurrencyAmount } from "@uniswap/sdk-core";
export interface PoolInfo {
    token0: string;
    token1: string;
    fee: number;
    tickSpacing: number;
    sqrtPriceX96: ethers.BigNumber;
    liquidity: ethers.BigNumber;
    tick: number;
    currentPrice: number;
}
/**
 * Retrieves information about a pool.
 * @param tokenA - The first token in the pool.
 * @param tokenB - The second token in the pool.
 * @param poolFee - The fee amount for the pool.
 * @param provider - The Ethereum provider.
 * @param chainId - The chain ID.
 * @returns A Promise that resolves to the pool information or null if the pool does not exist.
 * @throws An error if no provider is provided.
 */
export declare function getPoolInfo(tokenA: Token, tokenB: Token, poolFee: FeeAmount, provider: ethers.providers.Provider, chainId: number): Promise<PoolInfo | null>;
/**
 * Retrieves the pool data for a given pair of tokens and pool fee.
 * If the pool does not exist, it creates a new pool with the provided tokens and fee.
 *
 * @param token0 - The first token in the pair.
 * @param token1 - The second token in the pair.
 * @param poolFee - The fee amount for the pool.
 * @param provider - The ethers provider used to interact with the blockchain.
 * @param chainId - The chain ID.
 * @returns An object containing the pool data and a flag indicating whether the pool was created.
 * @throws If there is an error retrieving or creating the pool.
 */
export declare function getPoolData(token0: CurrencyAmount<Token>, token1: CurrencyAmount<Token>, poolFee: FeeAmount, provider: ethers.providers.Provider, chainId: number): Promise<{
    pool: Pool;
    createPool: boolean;
}>;
/**
 * Computes the token amount for liquidity based on the given parameters.
 *
 * @param token0 - The first token in the pool.
 * @param token1 - The second token in the pool.
 * @param amount - The amount of liquidity.
 * @param poolFee - The fee amount for the pool.
 * @param currentPrice - The current price of the pool.
 * @param output - The desired output token ("token0" or "token1").
 * @param lowerPrice - The lower price limit.
 * @param upperPrice - The upper price limit.
 * @returns The computed output amount.
 */
export declare const computeTokenAmountForLiquidity: (token0: Token, token1: Token, amount: number, poolFee: FeeAmount, currentPrice: number, output?: "token0" | "token1", lowerPrice?: number, upperPrice?: number) => string;
