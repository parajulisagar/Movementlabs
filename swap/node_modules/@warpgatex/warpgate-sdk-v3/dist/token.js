"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTokenInfo = void 0;
const ethers_1 = require("ethers");
const constants_1 = require("./constants");
/**
 * Retrieves information about a token.
 * @param tokenAddress The address of the token.
 * @param chainId The chain ID.
 * @returns An object containing the token's name, symbol, decimals, and address.
 *          Returns null if an error occurs.
 */
const getTokenInfo = (tokenAddress, chainId) => __awaiter(void 0, void 0, void 0, function* () {
    if (!Object.values(constants_1.ChainId).includes(Number(chainId))) {
        throw new Error("Invalid Chain ID");
    }
    try {
        const provider = new ethers_1.ethers.providers.JsonRpcProvider(constants_1.RPC_URL[chainId]);
        const tokenContract = new ethers_1.ethers.Contract(tokenAddress, constants_1.ERC20_ABI, provider);
        const [name, symbol, decimals] = yield Promise.all([
            tokenContract.name(),
            tokenContract.symbol(),
            tokenContract.decimals(),
        ]);
        return {
            name,
            symbol,
            decimals,
            address: tokenAddress,
        };
    }
    catch (error) {
        console.log(error);
        return null;
    }
});
exports.getTokenInfo = getTokenInfo;
