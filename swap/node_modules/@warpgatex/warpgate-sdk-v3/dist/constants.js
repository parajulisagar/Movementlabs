"use strict";
// This file stores web3 related constants such as addresses, token definitions, ETH currency references and ABI's
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RPC_URL = exports.WETH_ABI = exports.GET_WALLET_TOKEN_BALANCE_ABI = exports.NONFUNGIBLE_POSITION_MANAGER_ABI = exports.ERC20_ABI = exports.MULTICALL_ABI = exports.MULTICALL_CONTRACT_ADDRESS = exports.MAX_PRIORITY_FEE_PER_GAS = exports.MAX_FEE_PER_GAS = exports.POOL_INIT_CODE_HASH = exports.WETH = exports.SMART_ROUTER_ADDRESS = exports.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS = exports.DEPLOYER_ADDRESS = exports.CHAIN_ID = exports.ChainId = void 0;
const dotenv_1 = __importDefault(require("dotenv"));
const sdk_core_1 = require("@uniswap/sdk-core");
const ethers_1 = require("ethers");
if (process.env.SDK_ENV === "test") {
    dotenv_1.default.config();
}
exports.ChainId = {
    IMX_TESTNET: 13473,
    BASE3: 48220505331,
    IMX_MAINNET: 13371,
    SEPOLIA: 11155111,
    MOVEMENT_TESTNET: 30732,
    GLUE_TESTNET: 1300
};
exports.CHAIN_ID = Number(process.env.CHAIN_ID);
// Addresses
exports.DEPLOYER_ADDRESS = {
    [exports.ChainId.IMX_TESTNET]: "0xFe44699408A456CDEdA31a2281A1D33adEBF354D",
    [exports.ChainId.BASE3]: "0x550b50E172f76d565ed5e0430C0C04fE0296D650",
    [exports.ChainId.IMX_MAINNET]: "0xABCD4caA54618193Bf6C8B526AA04CF432cF05ca",
    [exports.ChainId.SEPOLIA]: "0xa181F93F45208F6FF8696975F4844957E1eFA35e",
    [exports.ChainId.MOVEMENT_TESTNET]: "0xA0eAE1DFc5c87f6358C33b614E5226691d6652Ce",
    [exports.ChainId.GLUE_TESTNET]: "0x51711b853CDB0269DcA98A6491F839245235De5A",
};
exports.NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS = {
    [exports.ChainId.IMX_TESTNET]: "0xa181F93F45208F6FF8696975F4844957E1eFA35e",
    [exports.ChainId.BASE3]: "0x61D532f83597511D29AD7075A3dDa3Fe59872Ed8",
    [exports.ChainId.IMX_MAINNET]: "0x6f6d58cA08bc72a9eD8a11C5126f3fb7ac4De9De",
    [exports.ChainId.SEPOLIA]: "0xB52eEe537DcbE5D99633245424ca8fE6FB7e8A4d",
    [exports.ChainId.MOVEMENT_TESTNET]: "0x3A59929C8ef8640a0985A07C5886B811CC4dCa0F",
    [exports.ChainId.GLUE_TESTNET]: "0x1B8Cd1726A47016678E3300b253e5eb1C526B3cb",
};
exports.SMART_ROUTER_ADDRESS = {
    [exports.ChainId.IMX_TESTNET]: "0x7dCA16412891c2aF36FDf95593CA2b662f79Ee52",
    [exports.ChainId.BASE3]: "0x6Bd9EFb27792a24Ae85082454D95FAb2902D3b70",
    [exports.ChainId.IMX_MAINNET]: "0x8f23844D4c19411123801491f0F8a7604e9aD175",
    [exports.ChainId.SEPOLIA]: "0xB27c194926cB1369d0011B953F5A434DE4d2AdFB",
    [exports.ChainId.MOVEMENT_TESTNET]: "0x0bF88F8072E12CFeC9CD664A1b8ffb97f6A9c904",
    [exports.ChainId.GLUE_TESTNET]: "0xEf5C1e6cAb839667438A3e268541DbF60CFEAE36",
};
// Currencies and Tokens
exports.WETH = {
    [exports.ChainId.IMX_TESTNET]: new sdk_core_1.Token(exports.ChainId.IMX_TESTNET, "0x7828DE82Bba71cc354aBd176Afea9F97afb59062", 18, "WIMX", "Wrapped IMX"),
    [exports.ChainId.BASE3]: new sdk_core_1.Token(exports.ChainId.BASE3, "0x1168784719d2ee5D3Df422A55765672231569973", 18, "WNAUT", "Wrapped NAUT"),
    [exports.ChainId.IMX_MAINNET]: new sdk_core_1.Token(exports.ChainId.IMX_MAINNET, "0x3A0C2Ba54D6CBd3121F01b96dFd20e99D1696C9D", 18, "WIMX", "Wrapped IMX"),
    [exports.ChainId.SEPOLIA]: new sdk_core_1.Token(exports.ChainId.SEPOLIA, "0x7168Ee4968C867BD71e8E581f2f2b91F6B267ED0", 18, "WETH", "Wrapped Ether"),
    [exports.ChainId.MOVEMENT_TESTNET]: new sdk_core_1.Token(exports.ChainId.MOVEMENT_TESTNET, "0xc02df8710Be33901D11A7E2D49B6c841e12B6f76", 18, "WMOVE", "Wrapped Move"),
    [exports.ChainId.GLUE_TESTNET]: new sdk_core_1.Token(exports.ChainId.GLUE_TESTNET, "0x85256E9eA6F66d9B7677F1e9CE37594eCEf74424", 18, "WGLUE", "Wrapped Glue"),
};
exports.POOL_INIT_CODE_HASH = {
    [exports.ChainId.IMX_TESTNET]: "0x8fb82830f8fa2a81d1b5156176e72c8d6b2fc897bc3d2fa77c25ce28f3a911cc",
    [exports.ChainId.BASE3]: "0x965fc9e2b83fdb334d9096bef7094a4584dccd9e2ddd24e23eebe1c03603b398",
    [exports.ChainId.IMX_MAINNET]: "0x965fc9e2b83fdb334d9096bef7094a4584dccd9e2ddd24e23eebe1c03603b398",
    [exports.ChainId.SEPOLIA]: "0xc5159e58f483e2e0dad14c3ff06eca0abcd33d37b67c18689ebd386f1a0e3c66",
    [exports.ChainId.MOVEMENT_TESTNET]: "0x965fc9e2b83fdb334d9096bef7094a4584dccd9e2ddd24e23eebe1c03603b398",
    [exports.ChainId.GLUE_TESTNET]: "0x965fc9e2b83fdb334d9096bef7094a4584dccd9e2ddd24e23eebe1c03603b398",
};
// Transactions
exports.MAX_FEE_PER_GAS = {
    [exports.ChainId.IMX_TESTNET]: ethers_1.ethers.utils.parseUnits("100", "gwei"),
    [exports.ChainId.IMX_MAINNET]: ethers_1.ethers.utils.parseUnits("10", "gwei"),
    [exports.ChainId.SEPOLIA]: ethers_1.ethers.utils.parseUnits("100", "gwei"),
    [exports.ChainId.MOVEMENT_TESTNET]: ethers_1.ethers.utils.parseUnits("5", "gwei"),
};
exports.MAX_PRIORITY_FEE_PER_GAS = {
    [exports.ChainId.IMX_TESTNET]: ethers_1.ethers.utils.parseUnits("100", "gwei"),
    [exports.ChainId.IMX_MAINNET]: ethers_1.ethers.utils.parseUnits("10", "gwei"),
    [exports.ChainId.SEPOLIA]: ethers_1.ethers.utils.parseUnits("100", "gwei"),
    [exports.ChainId.MOVEMENT_TESTNET]: ethers_1.ethers.utils.parseUnits("5", "gwei"),
};
// Multicall3
exports.MULTICALL_CONTRACT_ADDRESS = {
    [exports.ChainId.IMX_TESTNET]: "0x094d8D21da9c7734B8DEfC1727e6B9190ea40A37",
    [exports.ChainId.BASE3]: "0x2d9C94FBc33b6Ca13d0Ae83E49ff61b428e04e6c",
    [exports.ChainId.IMX_MAINNET]: "0x4f6F1CeE578C0B201c65CCaaBFF1D924377F622D",
    [exports.ChainId.SEPOLIA]: "",
    [exports.ChainId.MOVEMENT_TESTNET]: "0xb0A8F1e4c4C2673Fc0aA699103a5F6a1C8f65B98",
    [exports.ChainId.GLUE_TESTNET]: "0x5fb9879b3cE18f0cAD6188575AAc186E46f3f9B6",
};
// ABI's
exports.MULTICALL_ABI = [
    "function aggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes[] returnData)",
    "function aggregate3(tuple(address target, bool allowFailure, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
    "function aggregate3Value(tuple(address target, bool allowFailure, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
    "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
    "function getBasefee() view returns (uint256 basefee)",
    "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
    "function getBlockNumber() view returns (uint256 blockNumber)",
    "function getChainId() view returns (uint256 chainid)",
    "function getCurrentBlockCoinbase() view returns (address coinbase)",
    "function getCurrentBlockDifficulty() view returns (uint256 difficulty)",
    "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
    "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
    "function getEthBalance(address addr) view returns (uint256 balance)",
    "function getLastBlockHash() view returns (bytes32 blockHash)",
    "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
    "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
];
exports.ERC20_ABI = [
    // Read-Only Functions
    "function balanceOf(address owner) view returns (uint256)",
    "function decimals() view returns (uint8)",
    "function symbol() view returns (string)",
    "function name() view returns (string)",
    // Authenticated Functions
    "function transfer(address to, uint amount) returns (bool)",
    "function approve(address _spender, uint256 _value) returns (bool)",
    // function to get allowance
    "function allowance(address _owner, address _spender) view returns (uint256)",
    // Events
    "event Transfer(address indexed from, address indexed to, uint amount)",
];
exports.NONFUNGIBLE_POSITION_MANAGER_ABI = [
    // Read-Only Functions
    "function balanceOf(address _owner) view returns (uint256)",
    "function tokenOfOwnerByIndex(address _owner, uint256 _index) view returns (uint256)",
    "function tokenURI(uint256 tokenId) view returns (string memory)",
    "function positions(uint256 tokenId) external view returns (uint96 nonce, address operator, address token0, address token1, uint24 fee, int24 tickLower, int24 tickUpper, uint128 liquidity, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128, uint128 tokensOwed0, uint128 tokensOwed1)",
    {
        inputs: [
            {
                components: [
                    { internalType: "uint256", name: "tokenId", type: "uint256" },
                    { internalType: "address", name: "recipient", type: "address" },
                    { internalType: "uint128", name: "amount0Max", type: "uint128" },
                    { internalType: "uint128", name: "amount1Max", type: "uint128" },
                ],
                internalType: "struct INonfungiblePositionManager.CollectParams",
                name: "params",
                type: "tuple",
            },
        ],
        name: "collect",
        outputs: [
            { internalType: "uint256", name: "amount0", type: "uint256" },
            { internalType: "uint256", name: "amount1", type: "uint256" },
        ],
        stateMutability: "payable",
        type: "function",
    },
];
exports.GET_WALLET_TOKEN_BALANCE_ABI = [
    "function getWalletTokenBalance(address[] calldata walletAddress, address[] calldata tokenAddress) external view returns (uint256[] memory)",
];
exports.WETH_ABI = [
    // Read-Only Functions
    "function balanceOf(address owner) view returns (uint256)",
    "function decimals() view returns (uint8)",
    "function symbol() view returns (string)",
    // Authenticated Functions
    "function deposit() payable",
    "function withdraw(uint amount)",
    // Events
    "event Deposit(address indexed from, uint amount)",
    "event Withdrawal(address indexed to, uint amount)",
];
exports.RPC_URL = {
    [exports.ChainId.IMX_TESTNET]: "https://wider-blue-wind.imx-testnet.quiknode.pro/3f38de94a68fde8c4c73946f2eb95cc6b831c6fa/",
    [exports.ChainId.BASE3]: "https://rpc.l3.3base.org/",
    [exports.ChainId.IMX_MAINNET]: "https://orbital-convincing-forest.imx-mainnet.quiknode.pro/c936618fee68fb1f858c0a4a5461d28dd7b880a2/",
    [exports.ChainId.SEPOLIA]: "https://1rpc.io/sepolia",
    [exports.ChainId.MOVEMENT_TESTNET]: "https://mevm.devnet.imola.movementlabs.xyz",
    [exports.ChainId.GLUE_TESTNET]: "https://testnet-ws-1.server-1.glue.net",
};
