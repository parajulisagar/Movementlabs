import BigNumber from "bignumber.js";
import { ethers } from "ethers";
import JSBI from "jsbi";

/**
 * Converts a readable amount to a JSBI value.
 * 
 * @param amount - The readable amount to convert.
 * @param decimals - The number of decimal places in the amount.
 * @returns The JSBI value representing the converted amount.
 */
export function fromReadableAmount(amount: number, decimals: number): JSBI {
  const extraDigits = Math.pow(10, countDecimals(amount));
  const adjustedAmount = parseInt((amount * extraDigits).toString(), 10);
  return JSBI.divide(
    JSBI.multiply(
      JSBI.BigInt(adjustedAmount),
      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(decimals))
    ),
    JSBI.BigInt(extraDigits)
  );
}

/**
 * Converts a raw amount to a readable amount with the specified number of decimals.
 * 
 * @param rawAmount The raw amount to convert.
 * @param decimals The number of decimals to include in the readable amount.
 * @returns The converted readable amount as a string.
 */
export function toReadableAmount(rawAmount: number, decimals: number): string {
  return JSBI.divide(
    JSBI.BigInt(rawAmount),
    JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(decimals))
  ).toString();
}

/**
 * Counts the number of decimal places in a number.
 * 
 * @param x - The number to count the decimal places of.
 * @returns The number of decimal places in the given number.
 */
function countDecimals(x: number) {
  if (Math.floor(x) === x) {
    return 0;
  }
  return x.toString().split(".")[1].length || 0;
}

/**
 * Formats the given amount with the specified number of decimals.
 * 
 * @param amount - The amount to be formatted.
 * @param decimals - The number of decimals to be used for formatting.
 * @returns The formatted amount as a string.
 */
export function formatAmount(amount: string, decimals: number) {
  return ethers.utils
    .formatUnits(
      new BigNumber(amount).multipliedBy(10 ** decimals).toFixed(0),
      decimals
    )
    .toString();
}
