/**
 * Represents the Ether currency.
 * Extends the NativeCurrency class.
 */
import { Currency, NativeCurrency, Token } from "@uniswap/sdk-core";
import { WETH } from "./constants";

export class Ether extends NativeCurrency {
  /**
   * Constructs a new instance of the Ether class.
   * @param chainId The chain ID of the Ether currency.
   */
  protected constructor(chainId: number) {
    super(chainId, 18, "ETH", "Ether");
  }

  /**
   * Gets the wrapped token associated with Ether.
   * @returns The wrapped token.
   */
  public get wrapped(): Token {
    return WETH[this.chainId];
  }

  private static _etherCache: { [chainId: number]: Ether } = {};

  /**
   * Retrieves the Ether instance for the specified chain ID.
   * If an instance does not exist, a new instance is created and cached.
   * @param chainId The chain ID.
   * @returns The Ether instance.
   */
  public static onChain(chainId: number): Ether {
    return (
      this._etherCache[chainId] ??
      (this._etherCache[chainId] = new Ether(chainId))
    );
  }

  /**
   * Checks if the Ether currency is equal to another currency.
   * @param other The other currency to compare.
   * @returns True if the currencies are equal, false otherwise.
   */
  public equals(other: Currency): boolean {
    return other.isNative && other.chainId === this.chainId;
  }
}
