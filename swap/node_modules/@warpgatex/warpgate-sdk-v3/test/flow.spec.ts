import { liquidityClient } from "../src/liquidity";
import { computeTokenAmountForLiquidity, getPoolData } from "../src/pool";
import { signer } from "./shared";
import { fromReadableAmount } from "../src/conversion";
import { Token, CurrencyAmount } from "@uniswap/sdk-core";
import { CHAIN_ID, MAX_FEE_PER_GAS } from "../src/constants";
import { ethers } from "ethers";
import {
  TICK_SPACINGS,
  TickMath,
  nearestUsableTick,
} from "@warpgatex/warp-v3-sdk";
import {
  MAX_PRIORITY_FEE_PER_GAS,
  NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS,
} from "../src/constants";

describe("Liquidity Pool", () => {
  const client = new liquidityClient(signer, CHAIN_ID);
  const token0Amount = 1;
  const token1Amount = 100;
  const token0 = new Token(
    CHAIN_ID,
    "0xBf7C5dAbc319fF50631685a857F4d286419466ae",
    18,
    "USDC",
    "USDC"
  );

  const token1 = new Token(
    CHAIN_ID,
    "0xBf7C5dAbc319fF50631685a857F4d286419466ae",
    18,
    "CAKE",
    "CAKE"
  );

  it("add liquidity", async () => {
    const token0CurrencyAmount = CurrencyAmount.fromRawAmount(
      token0,
      fromReadableAmount(token0Amount, token0.decimals)
    );
    const token1CurrencyAmount = CurrencyAmount.fromRawAmount(
      token1,
      fromReadableAmount(token1Amount, token1.decimals)
    );
    const poolData = await getPoolData(
      token0CurrencyAmount,
      token1CurrencyAmount,
      3000,
      signer.provider,
      CHAIN_ID
    );
    const mintPosition = await client.mintPosition(
      token0,
      token0Amount,
      token1,
      token1Amount,
      poolData.pool,
      poolData.createPool
    );
    console.log(mintPosition);
    const transaction = {
      data: mintPosition.calldata,
      to: NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS[CHAIN_ID][CHAIN_ID],
      value: mintPosition.value,
      from: signer.address,
      gasLimit: 2000000,
      maxFeePerGas: ethers.utils.parseUnits("100", "gwei"),
      maxPriorityFeePerGas: ethers.utils.parseUnits("100", "gwei"),
    };
    const tx = await signer.sendTransaction(transaction);
    console.log(tx);
  });

  it("increase liquidity", async () => {
    const tokenId = 11;
    const increasePosition = await client.increasePosition(
      tokenId,
      token0,
      token0Amount,
      token1,
      token1Amount
    );

    const transaction = {
      data: increasePosition.calldata,
      to: NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS[CHAIN_ID][CHAIN_ID],
      value: increasePosition.value,
      from: signer.address,
      gasLimit: 6000000,
      maxFeePerGas: MAX_FEE_PER_GAS[CHAIN_ID][CHAIN_ID],
      maxPriorityFeePerGas: MAX_PRIORITY_FEE_PER_GAS[CHAIN_ID][CHAIN_ID],
    };

    const tx = await signer.sendTransaction(transaction);
    console.log(tx);
    tx.wait();
  });

  it("get position info", async () => {
    const positionInfo = await client.getPositionInfo(1);
    console.log("Token amount0", positionInfo.tokenAmount0.toFixed());
    console.log("Token Amount1", positionInfo.tokenAmount1.toFixed());
    console.log("Token Owed0", positionInfo.tokensOwed0.toFixed());
    console.log("Token Owed1", positionInfo.tokensOwed1.toFixed());
    console.log("Lower Price", positionInfo.lowerRangePrice);
    console.log("Upper Price", positionInfo.upperRangePrice);
    console.log("Current Price", positionInfo.currentPrice);
  });

  it("tick", async () => {
    console.log(
      "Lower Tick: ",
      nearestUsableTick(TickMath.MIN_TICK, TICK_SPACINGS[100])
    );
    console.log(
      "Upper Tick: ",
      nearestUsableTick(TickMath.MAX_TICK, TICK_SPACINGS[100])
    );
  });

  it("Collect fee from position", async () => {
    const positionId = 3;
    const positionInfo = await client.getPositionInfo(positionId);

    console.log("collectedFee token0", positionInfo.tokensOwed0.toString());
    console.log("Collected Fee token1: ", positionInfo.tokensOwed1.toString());

    const { calldata, value } = await client.collectFees(
      positionId,
      new Token(CHAIN_ID, positionInfo.token0, 18, "Symbol", "Name"),
      new Token(CHAIN_ID, positionInfo.token1, 18, "Symbol", "Name"),
      signer.address
    );
    console.log({
      calldata,
      value,
    });

    const transaction = {
      data: calldata,
      to: NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS[CHAIN_ID],
      value,
      from: signer.address,
      gasLimit: 6000000,
      maxFeePerGas: MAX_FEE_PER_GAS[CHAIN_ID],
      maxPriorityFeePerGas: MAX_PRIORITY_FEE_PER_GAS[CHAIN_ID],
    };

    const tx = await signer.sendTransaction(transaction);
    console.log("Transaction Details: ", tx);
  });

  it("Remove liquidity from position", async () => {
    const positionId = 10911;
    const positionInfo = await client.getPositionInfo(positionId);
    console.log("positionInfo", positionInfo);
    console.log("Token Amount token0", positionInfo.tokenAmount0.toString());
    console.log("Token Amount token1: ", positionInfo.tokenAmount1.toString());
    const { calldata, value } = await client.removeLiquidity(
      positionId,
      new Token(CHAIN_ID, positionInfo.token0, 18, "Symbol", "Name"),
      new Token(CHAIN_ID, positionInfo.token1, 18, "Symbol", "Name"),
      1,
      signer.address
    );
    console.log({
      calldata,
      value,
    });
    // return;
    const transaction = {
      data: calldata,
      to: NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS[CHAIN_ID],
      value,
      from: signer.address,
      gasLimit: 6000000,
      maxFeePerGas: MAX_FEE_PER_GAS[CHAIN_ID],
      maxPriorityFeePerGas: MAX_PRIORITY_FEE_PER_GAS[CHAIN_ID],
    };

    const tx = await signer.sendTransaction(transaction);
    console.log("Transaction Details: ", tx);
    await tx.wait();
  });

  it("Compute token amount for liquidity", async () => {
    const fee = 100;
    const currentPrice = 3;
    const lowerPrice = 2;
    const upperPrice = 5;
    const amount = 1;

    const output1 = computeTokenAmountForLiquidity(
      token0,
      token1,
      amount,
      fee,
      currentPrice,
      "token1",
      lowerPrice,
      upperPrice
    );

    const output0 = computeTokenAmountForLiquidity(
      token0,
      token1,
      amount,
      fee,
      currentPrice,
      "token0",
      lowerPrice,
      upperPrice
    );

    console.log({
      output0,
      output1,
    });
  });

  it("Wrap/Unwrap native token", async () => {
    const tx = await client.wrapNativeToken("0.1");
    console.log(tx.hash);
    const tx2 = await client.unwrapNativeToken("0.1");
    console.log(tx2.hash);
  });
});
