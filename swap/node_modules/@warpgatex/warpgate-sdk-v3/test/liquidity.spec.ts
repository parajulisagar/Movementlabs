import { liquidityClient } from "../src/liquidity";
import { getPoolData } from "../src/pool";
import { signer } from "./shared";
import { fromReadableAmount } from "../src/conversion";
import { Token, CurrencyAmount } from "@uniswap/sdk-core";
import {
  CHAIN_ID,
  MAX_FEE_PER_GAS,
  MAX_PRIORITY_FEE_PER_GAS,
  NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS,
} from "../src/constants";

describe("Liquidity Pool", () => {
  console.log("wallet: ", signer.address);
  const client = new liquidityClient(signer, CHAIN_ID);
  const token0Amount = 2000000;
  const token1Amount = 100;
  const token0 = new Token(
    CHAIN_ID,
    "0x910fb3C2af0D946671Efd65EB412083F7c8Be996",
    18,
    "USDC",
    "USDC"
  );

  const token1 = new Token(
    CHAIN_ID,
    "0xc02df8710Be33901D11A7E2D49B6c841e12B6f76",
    18,
    "WMVM",
    "WMVM"
  );

  it("add liquidity", async () => {
    const token0CurrencyAmount = CurrencyAmount.fromRawAmount(
      token0,
      fromReadableAmount(token0Amount, token0.decimals)
    );
    const token1CurrencyAmount = CurrencyAmount.fromRawAmount(
      token1,
      fromReadableAmount(token1Amount, token1.decimals)
    );
    const poolData = await getPoolData(
      token0CurrencyAmount,
      token1CurrencyAmount,
      3000,
      signer.provider,
      CHAIN_ID
    );
    console.log("poolData: ", poolData);
    const mintPosition = await client.mintPosition(
      token0,
      token0Amount,
      token1,
      token1Amount,
      poolData.pool,
      poolData.createPool
    );
    console.log(mintPosition);
    const tx = await signer.sendTransaction({
      data: mintPosition.calldata,
      to: NONFUNGIBLE_POSITION_MANAGER_CONTRACT_ADDRESS[CHAIN_ID],
      value: mintPosition.value,
      from: signer.address,
      gasLimit: 10000000,
      maxFeePerGas: MAX_FEE_PER_GAS[CHAIN_ID],
      maxPriorityFeePerGas: MAX_PRIORITY_FEE_PER_GAS[CHAIN_ID],
    });
    const receipt = await tx.wait();
    console.log(receipt);
  });

  it("get position info", async () => {
    const positions = await client.getPositionIds(signer.address);
    console.log("Positions", positions);
    for (const position of positions) {
      // if(position.toNumber() <= 4) continue;
      const positionInfo = await client.getPositionInfo(position);
      console.log("Position Info", positionInfo);
      console.log("Token amount0", positionInfo.tokenAmount0.toFixed());
      console.log("Token Amount1", positionInfo.tokenAmount1.toFixed());
      console.log("Token Owed0", positionInfo.tokensOwed0.toFixed());
      console.log("Token Owed1", positionInfo.tokensOwed1.toFixed());
      console.log("Lower Price", positionInfo.lowerRangePrice);
      console.log("Upper Price", positionInfo.upperRangePrice);
      console.log("Current Price", positionInfo.currentPrice);
    }
  });
});
