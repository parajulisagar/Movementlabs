import { liquidityClient } from "../src/liquidity";
import { signer } from "./shared";
import { Token, TradeType } from "@uniswap/sdk-core";
import {
  CHAIN_ID,
  MAX_FEE_PER_GAS,
  MAX_PRIORITY_FEE_PER_GAS,
  SMART_ROUTER_ADDRESS,
} from "../src/constants";

describe("SWAP", () => {
  const client = new liquidityClient(signer, CHAIN_ID);
  const token0 = new Token(
    CHAIN_ID,
    "0xc02df8710Be33901D11A7E2D49B6c841e12B6f76",
    18,
    "WNAUT",
    "WNAUT"
  );

  const token1 = new Token(
    CHAIN_ID,
    "0x910fb3C2af0D946671Efd65EB412083F7c8Be996",
    18,
    "USDC",
    "USDC"
  );

  it("get Quote", async () => {
    const slippagePercent = 0.005;
    const getQuote = await client.getQuote(
      token0,
      token1,
      TradeType.EXACT_INPUT,
      "1",
      slippagePercent
    );
    console.log(getQuote);
  });

  // it("swap WMVM to USDC", async () => {
  //   const swapData = await client.swap(
  //     token1,
  //     token0,
  //     TradeType.EXACT_INPUT,
  //     "10",
  //     {
  //       slippage: 0.05,
  //       deadline: Math.floor(Date.now() / 1000) + 60 * 20,
  //     }
  //   );
  //   const transaction = {
  //     data: swapData?.methodParameters?.calldata,
  //     to: SMART_ROUTER_ADDRESS[CHAIN_ID],
  //     value: swapData?.methodParameters?.value,
  //     from: signer.address,
  //     gasLimit: 1000000,
  //     maxFeePerGas: MAX_FEE_PER_GAS[CHAIN_ID],
  //     maxPriorityFeePerGas: MAX_PRIORITY_FEE_PER_GAS[CHAIN_ID],
  //   };

  //   const tx = await signer.sendTransaction(transaction);
  //   await tx.wait();
  //   console.log(tx);
  // });

  // it("swap USDC to WMVM", async () => {
  //   const swapData = await client.swap(
  //     token0,
  //     token1,
  //     TradeType.EXACT_INPUT,
  //     "0.01",
  //     {
  //       slippage: 0.05,
  //       deadline: Math.floor(Date.now() / 1000) + 60 * 20,
  //     }
  //   );
  //   const transaction = {
  //     data: swapData?.methodParameters?.calldata,
  //     to: SMART_ROUTER_ADDRESS[CHAIN_ID],
  //     value: swapData?.methodParameters?.value,
  //     from: signer.address,
  //     gasLimit: 1000000,
  //     maxFeePerGas: MAX_FEE_PER_GAS[CHAIN_ID],
  //     maxPriorityFeePerGas: MAX_PRIORITY_FEE_PER_GAS[CHAIN_ID],
  //   };

  //   const tx = await signer.sendTransaction(transaction);
  //   await tx.wait();
  //   console.log(tx);
  // });
});
