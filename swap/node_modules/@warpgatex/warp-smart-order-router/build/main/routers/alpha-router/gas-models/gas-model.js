"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IOnChainGasModelFactory = exports.usdGasTokensByChain = void 0;
const warp_sdk_core_1 = require("@warpgatex/warp-sdk-core");
const token_provider_1 = require("../../../providers/token-provider");
const token_provider_2 = require("./../../../providers/token-provider");
// When adding new usd gas tokens, ensure the tokens are ordered
// from tokens with highest decimals to lowest decimals. For example,
// DAI_AVAX has 18 decimals and comes before USDC_AVAX which has 6 decimals.
exports.usdGasTokensByChain = {
    [warp_sdk_core_1.ChainId.MAINNET]: [token_provider_1.DAI_MAINNET, token_provider_1.USDC_MAINNET, token_provider_1.USDT_MAINNET],
    [warp_sdk_core_1.ChainId.ARBITRUM_ONE]: [token_provider_1.DAI_ARBITRUM, token_provider_1.USDC_ARBITRUM, token_provider_1.USDT_ARBITRUM],
    [warp_sdk_core_1.ChainId.OPTIMISM]: [token_provider_1.DAI_OPTIMISM, token_provider_1.USDC_OPTIMISM, token_provider_1.USDT_OPTIMISM],
    [warp_sdk_core_1.ChainId.OPTIMISM_GOERLI]: [
        token_provider_1.DAI_OPTIMISM_GOERLI,
        token_provider_1.USDC_OPTIMISM_GOERLI,
        token_provider_1.USDT_OPTIMISM_GOERLI,
    ],
    [warp_sdk_core_1.ChainId.ARBITRUM_GOERLI]: [token_provider_1.USDC_ARBITRUM_GOERLI],
    [warp_sdk_core_1.ChainId.GOERLI]: [token_provider_1.DAI_GOERLI, token_provider_1.USDC_GOERLI, token_provider_1.USDT_GOERLI, token_provider_1.WBTC_GOERLI],
    [warp_sdk_core_1.ChainId.SEPOLIA]: [
        new warp_sdk_core_1.Token(warp_sdk_core_1.ChainId.SEPOLIA, '0x4e382f97631Ab644345C8C6F642Be4bC6B8b3A32', 18, 'USDT', 'Tether USD'),
    ],
    [warp_sdk_core_1.ChainId.POLYGON]: [token_provider_1.USDC_POLYGON],
    [warp_sdk_core_1.ChainId.POLYGON_MUMBAI]: [token_provider_1.DAI_POLYGON_MUMBAI],
    [warp_sdk_core_1.ChainId.CELO]: [token_provider_1.CUSD_CELO],
    [warp_sdk_core_1.ChainId.CELO_ALFAJORES]: [token_provider_1.CUSD_CELO_ALFAJORES],
    [warp_sdk_core_1.ChainId.GNOSIS]: [token_provider_1.USDC_ETHEREUM_GNOSIS],
    [warp_sdk_core_1.ChainId.MOONBEAM]: [token_provider_1.USDC_MOONBEAM],
    [warp_sdk_core_1.ChainId.BNB]: [token_provider_1.USDT_BNB, token_provider_1.USDC_BNB, token_provider_1.DAI_BNB],
    [warp_sdk_core_1.ChainId.AVALANCHE]: [token_provider_1.DAI_AVAX, token_provider_1.USDC_AVAX],
    [warp_sdk_core_1.ChainId.BASE]: [token_provider_1.USDC_BASE],
    [warp_sdk_core_1.ChainId.IMX_TESTNET]: [token_provider_1.USDC_IMX_TESTNET],
    [warp_sdk_core_1.ChainId.IMX_MAINNET]: [token_provider_1.USDC_IMX_MAINNET],
    [warp_sdk_core_1.ChainId.MOVEMENT_TESTNET]: [token_provider_1.USDC_MOVEMENT_TESTNET],
    // new chain
    [warp_sdk_core_1.ChainId.GLUE_TESTNET]: [token_provider_2.USDC_GLUE_TESTNET],
};
/**
 * Factory for building gas models that can be used with any route to generate
 * gas estimates.
 *
 * Factory model is used so that any supporting data can be fetched once and
 * returned as part of the model.
 *
 * @export
 * @abstract
 * @class IV2GasModelFactory
 */
// export abstract class IV2GasModelFactory {
//   public abstract buildGasModel({
//     chainId,
//     gasPriceWei,
//     poolProvider,
//     token,
//     providerConfig,
//   }: BuildV2GasModelFactoryType): Promise<IGasModel<V2RouteWithValidQuote>>;
// }
/**
 * Factory for building gas models that can be used with any route to generate
 * gas estimates.
 *
 * Factory model is used so that any supporting data can be fetched once and
 * returned as part of the model.
 *
 * @export
 * @abstract
 * @class IOnChainGasModelFactory
 */
class IOnChainGasModelFactory {
}
exports.IOnChainGasModelFactory = IOnChainGasModelFactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FzLW1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3JvdXRlcnMvYWxwaGEtcm91dGVyL2dhcy1tb2RlbHMvZ2FzLW1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLDREQUEwRDtBQUcxRCxzRUFpQzJDO0FBWTNDLHdFQUF3RTtBQUV4RSxnRUFBZ0U7QUFDaEUscUVBQXFFO0FBQ3JFLDRFQUE0RTtBQUMvRCxRQUFBLG1CQUFtQixHQUF1QztJQUNyRSxDQUFDLHVCQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyw0QkFBVyxFQUFFLDZCQUFZLEVBQUUsNkJBQVksQ0FBQztJQUM1RCxDQUFDLHVCQUFPLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyw2QkFBWSxFQUFFLDhCQUFhLEVBQUUsOEJBQWEsQ0FBQztJQUNwRSxDQUFDLHVCQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyw2QkFBWSxFQUFFLDhCQUFhLEVBQUUsOEJBQWEsQ0FBQztJQUNoRSxDQUFDLHVCQUFPLENBQUMsZUFBZSxDQUFDLEVBQUU7UUFDekIsb0NBQW1CO1FBQ25CLHFDQUFvQjtRQUNwQixxQ0FBb0I7S0FDckI7SUFDRCxDQUFDLHVCQUFPLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxxQ0FBb0IsQ0FBQztJQUNqRCxDQUFDLHVCQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQywyQkFBVSxFQUFFLDRCQUFXLEVBQUUsNEJBQVcsRUFBRSw0QkFBVyxDQUFDO0lBQ3JFLENBQUMsdUJBQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUNqQixJQUFJLHFCQUFLLENBQ1AsdUJBQU8sQ0FBQyxPQUFPLEVBQ2YsNENBQTRDLEVBQzVDLEVBQUUsRUFDRixNQUFNLEVBQ04sWUFBWSxDQUNiO0tBQ0Y7SUFDRCxDQUFDLHVCQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyw2QkFBWSxDQUFDO0lBQ2pDLENBQUMsdUJBQU8sQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLG1DQUFrQixDQUFDO0lBQzlDLENBQUMsdUJBQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLDBCQUFTLENBQUM7SUFDM0IsQ0FBQyx1QkFBTyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsb0NBQW1CLENBQUM7SUFDL0MsQ0FBQyx1QkFBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMscUNBQW9CLENBQUM7SUFDeEMsQ0FBQyx1QkFBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsOEJBQWEsQ0FBQztJQUNuQyxDQUFDLHVCQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyx5QkFBUSxFQUFFLHlCQUFRLEVBQUUsd0JBQU8sQ0FBQztJQUM1QyxDQUFDLHVCQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyx5QkFBUSxFQUFFLDBCQUFTLENBQUM7SUFDMUMsQ0FBQyx1QkFBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsMEJBQVMsQ0FBQztJQUMzQixDQUFDLHVCQUFPLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxpQ0FBZ0IsQ0FBQztJQUN6QyxDQUFDLHVCQUFPLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxpQ0FBZ0IsQ0FBQztJQUN6QyxDQUFDLHVCQUFPLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLHNDQUFxQixDQUFDO0lBQ25ELFlBQVk7SUFDWixDQUFDLHVCQUFPLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxrQ0FBaUIsQ0FBQztDQUM1QyxDQUFDO0FBMERGOzs7Ozs7Ozs7O0dBVUc7QUFDSCw2Q0FBNkM7QUFDN0Msb0NBQW9DO0FBQ3BDLGVBQWU7QUFDZixtQkFBbUI7QUFDbkIsb0JBQW9CO0FBQ3BCLGFBQWE7QUFDYixzQkFBc0I7QUFDdEIsK0VBQStFO0FBQy9FLElBQUk7QUFFSjs7Ozs7Ozs7OztHQVVHO0FBQ0gsTUFBc0IsdUJBQXVCO0NBWTVDO0FBWkQsMERBWUMifQ==