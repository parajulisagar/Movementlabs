import { BigNumber } from '@ethersproject/bignumber';
import { Pool } from '@uniswap/v3-sdk';
import { ChainId, Currency, CurrencyAmount, Token } from '@warpgatex/warp-sdk-core';
import { IPortionProvider } from '../providers/portion-provider';
import { ProviderConfig } from '../providers/provider';
import { ArbitrumGasData, OptimismGasData } from '../providers/v3/gas-data-provider';
import { IV3PoolProvider } from '../providers/v3/pool-provider';
import { SwapOptions, SwapRoute } from '../routers';
export declare function getHighestLiquidityV3NativePool(token: Token, poolProvider: IV3PoolProvider, providerConfig?: ProviderConfig): Promise<Pool | null>;
export declare function getHighestLiquidityV3USDPool(chainId: ChainId, poolProvider: IV3PoolProvider, providerConfig?: ProviderConfig): Promise<Pool>;
export declare function getGasCostInUSD(usdPool: Pool, costNativeCurrency: CurrencyAmount<Token>): import("@uniswap/sdk-core").CurrencyAmount<import("@uniswap/sdk-core").Token>;
export declare function getGasCostInNativeCurrency(nativeCurrency: Token, gasCostInWei: BigNumber): CurrencyAmount<Token>;
export declare function getGasCostInQuoteToken(quoteToken: Token, nativePool: Pool, costNativeCurrency: CurrencyAmount<Token>): Promise<import("@uniswap/sdk-core").CurrencyAmount<import("@uniswap/sdk-core").Token>>;
export declare function calculateArbitrumToL1FeeFromCalldata(calldata: string, gasData: ArbitrumGasData): [BigNumber, BigNumber];
export declare function calculateOptimismToL1FeeFromCalldata(calldata: string, gasData: OptimismGasData): [BigNumber, BigNumber];
export declare function getL2ToL1GasUsed(data: string, overhead: BigNumber): BigNumber;
export declare function calculateGasUsed(chainId: ChainId, route: SwapRoute, simulatedGasUsed: BigNumber, v3PoolProvider: IV3PoolProvider, l2GasData?: ArbitrumGasData | OptimismGasData, providerConfig?: ProviderConfig): Promise<{
    estimatedGasUsedUSD: import("@uniswap/sdk-core").CurrencyAmount<import("@uniswap/sdk-core").Token>;
    estimatedGasUsedQuoteToken: CurrencyAmount<Token>;
    quoteGasAdjusted: CurrencyAmount<Currency>;
}>;
export declare function initSwapRouteFromExisting(swapRoute: SwapRoute, v3PoolProvider: IV3PoolProvider, portionProvider: IPortionProvider, quoteGasAdjusted: CurrencyAmount<Currency>, estimatedGasUsed: BigNumber, estimatedGasUsedQuoteToken: CurrencyAmount<Currency>, estimatedGasUsedUSD: CurrencyAmount<Currency>, swapOptions: SwapOptions): SwapRoute;
